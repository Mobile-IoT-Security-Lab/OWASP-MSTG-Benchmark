
      _ _   __ __  _   __  _   _                _   
     / _ \ | _ _ \| | / / | | | |              | |  
    / /_\ \| |_/ /| |/ /  | |_| | _   _   _ _  | |_ 
    |  _  ||  __/ |    \  |  _  || | | |/  _  \|  _|
    | | | || |    | |\  \ | | | || |_| || | | || |_ 
    \_| |_/\_|    \_| \_/ \_| |_/\ _ _ /|_| |_|\_ _|
    ------------------------------------------------
    OWASP MASVS Static Analyzer                                
        
[+] APKHunt - a comprehensive static code analysis tool for Android apps
[+] Based on: OWASP MASVS - https://mobile-security.gitbook.io/masvs/
[+] Author: Sumit Kalaria & Mrunal Chawda
[*] Connect: Please do write to us for any suggestions/feedback.

[+] Log-file path: /home/kali/Desktop/test/APKHunt_MASTG-TEST0039_2024-5-27_13-7-2.txt

[+] Scan has been started at: 2024-05-27 13:07:02.467740634 -0400 EDT m=+0.000462189
[+] APK Base: MASTG-TEST0039.apk
[+] APK Size: 11.170898 MB
[+] APK Directory: /home/kali/Desktop/test/
[+] APK Static Analysis Path: /home/kali/Desktop/test/MASTG-TEST0039_SAST/
[+] APK Hash: MD5: 1228257654933fd2d9a8a76df1bfecb0
[+] APK Hash: SHA256: 65b797b73e6e50fedad91ab726a8cc728f968e7c5591562143f641bcce2a89d0

[+] d2j-dex2jar has started converting APK to Java JAR file
[+] =======================================================
    Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
dex2jar /home/kali/Desktop/test/MASTG-TEST0039.apk -> /home/kali/Desktop/test/MASTG-TEST0039.jar

[+] Jadx has started decompiling the application
[+] ============================================
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
INFO  - loading ...
INFO  - processing ...
INFO  - progress: 0 of 2653 (0%)INFO  - progress: 850 of 2653 (32%)INFO  - progress: 853 of 2653 (32%)INFO  - progress: 865 of 2653 (32%)INFO  - progress: 914 of 2653 (34%)INFO  - progress: 1109 of 2653 (41%)INFO  - progress: 1291 of 2653 (48%)INFO  - progress: 1396 of 2653 (52%)INFO  - progress: 1491 of 2653 (56%)INFO  - progress: 1603 of 2653 (60%)INFO  - progress: 1767 of 2653 (66%)INFO  - progress: 1815 of 2653 (68%)INFO  - progress: 1893 of 2653 (71%)INFO  - progress: 1936 of 2653 (72%)INFO  - progress: 1948 of 2653 (73%)INFO  - progress: 2020 of 2653 (76%)INFO  - progress: 2083 of 2653 (78%)INFO  - progress: 2225 of 2653 (83%)INFO  - progress: 2318 of 2653 (87%)INFO  - progress: 2360 of 2653 (88%)INFO  - progress: 2410 of 2653 (90%)INFO  - progress: 2519 of 2653 (94%)INFO  - progress: 2547 of 2653 (96%)INFO  - progress: 2618 of 2653 (98%)                                                             ERROR - finished with errors, count: 17

[+] Capturing the data from the AndroidManifest file
[+] ================================================

==>> The Basic Information...

    package="com.example.mastg_test0039"
    versionName="1.0"
    minSdkVersion="29"
    targetSdkVersion="33"
    - android:networkSecurityConfig attribute has not been observed.
    

==>> The Activities...

30:        <activity
34:        <activity

[+] Looking for the Exported Activities specifically...

	- No exported activities have been observed.

    > Total exported activities are: 0

    > QuickNote: It is recommended to use exported activities securely, if observed.

==>> The Content Providers...

42:        <provider

[+] Looking for the Exported Content Providers specifically...

	- No exported Content Providers have been observed.

    > Total exported Content Providers are: 0

    > QuickNote: It is recommended to use exported Content Providers securely, if observed.

==>> The Brodcast Receivers...

56:        <receiver

[+] Looking for the Exported Brodcast Receivers specifically...

	- No exported Brodcast Receivers have been observed.

    > Total exported Brodcast Receivers are: 0

    > QuickNote: It is recommended to use exported Brodcast Receivers securely, if observed.

==>>  The Services...

	- No Services have been observed.

[+] Looking for the Exported Services specifically...

	- No exported Services have been observed.

    > Total exported Services are: 0

    > QuickNote: It is recommended to use exported Services securely, if observed.

==>>  The Intents Filters...

38:                <action android:name="android.intent.action.MAIN"/>
39:                <category android:name="android.intent.category.LAUNCHER"/>

    > QuickNote: It is recommended to use Intent Filters securely, if observed.

==>> APK Component Summary
[+] --------------------------------
    Exported Activities: 0
    Exported Content Providers: 0
    Exported Broadcast Receivers: 0
    Exported Services: 0

[+] Let's start the static assessment based on "OWASP MASVS"

[+] Hunting begins based on "V2: Data Storage and Privacy Requirements"
[+] -------------------------------------------------------------------

==>> The Shared Preferences related instances...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/AppLaunchChecker.java
15:        return context.getSharedPreferences(SHARED_PREFS_NAME, 0).getBoolean(KEY_STARTED_FROM_LAUNCHER, false);
20:        SharedPreferences sp = activity.getSharedPreferences(SHARED_PREFS_NAME, 0);

[!] QuickNote:
    - It is recommended to use shared preferences appropriately, if observed. Please note that, Misuse of the SharedPreferences API can often lead to the exposure of sensitive data. MODE_WORLD_READABLE allows all applications to access and read the file contents. Applications compiled with an android:targetSdkVersion value less than 17 may be affected, if they run on an OS version that was released before Android 4.2 (API level 17).

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-2 | CWE-922: Insecure Storage of Sensitive Information
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>>  The SQLite Database Storage related instances...


==>> The Firebase Database instances...


==>> The Realm Database instances...


==>> The Internal Storage related instances...


==>> The External Storage related instances...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/ContextCompat.java
123:    public static File[] getExternalFilesDirs(Context context, String type) {
124:        return Api19Impl.getExternalFilesDirs(context, type);
127:    public static File[] getExternalCacheDirs(Context context) {
128:        return Api19Impl.getExternalCacheDirs(context);
313:        static File[] getExternalCacheDirs(Context obj) {
314:            return obj.getExternalCacheDirs();
317:        static File[] getExternalFilesDirs(Context obj, String type) {
318:            return obj.getExternalFilesDirs(type);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/FileProvider.java
212:                        target = context.getCacheDir();
214:                        target = Environment.getExternalStorageDirectory();
216:                        File[] externalFilesDirs = ContextCompat.getExternalFilesDirs(context, null);
221:                        File[] externalCacheDirs = ContextCompat.getExternalCacheDirs(context);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatUtil.java
36:        File cacheDir = context.getCacheDir();

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/os/EnvironmentCompat.java
12:        return Api21Impl.getExternalStorageState(path);
23:        static String getExternalStorageState(File path) {
24:            return Environment.getExternalStorageState(path);

[!] QuickNote:
    - It is recommended that any sensitive data should not be stored in the external storage, if observed. Please note that, Files saved to external storage are world-readable and it can be used by an attacker to allow for arbitrary control of the application in some scenarios.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-2 | CWE-922: Insecure Storage of Sensitive Information
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>> The Temporary File Creation instances...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/io/FilesKt__UtilsKt.java
41:        File dir = File.createTempFile(prefix, suffix, directory);
60:        return FilesKt.createTempFile(str, str2, file);
66:        File createTempFile = File.createTempFile(prefix, suffix, directory);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/io/path/PathsKt__PathUtilsKt.java
551:        Path createTempFile = Files.createTempFile(prefix, suffix, (FileAttribute[]) Arrays.copyOf(attributes, attributes.length));
558:        Path createTempFile = Files.createTempFile(prefix, suffix, (FileAttribute[]) Arrays.copyOf(attributes, attributes.length));
570:        return PathsKt.createTempFile(path, str, str2, fileAttributeArr);
576:            Path createTempFile = Files.createTempFile(directory, prefix, suffix, (FileAttribute[]) Arrays.copyOf(attributes, attributes.length));
580:        Path createTempFile2 = Files.createTempFile(prefix, suffix, (FileAttribute[]) Arrays.copyOf(attributes, attributes.length));

[!] QuickNote:
    - It is recommended that the temporary files should be securely deleted upon their usage, if observed. Please note that, Creating and using insecure temporary files can leave application and system data vulnerable to attack.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-2 | CWE-277: Insecure Inherited Permissions
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>> The Local Storage - Input Validation...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/SharedPreferencesCompat.java
20:            public void apply(SharedPreferences.Editor editor) {
41:        public void apply(SharedPreferences.Editor editor) {

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/SharedPreferencesKt.java
20:        SharedPreferences.Editor editor = $this$edit_u24default.edit();
30:    public static final void edit(SharedPreferences $this$edit, boolean commit, Function1<? super SharedPreferences.Editor, Unit> action) {
33:        SharedPreferences.Editor editor = $this$edit.edit();

[!] QuickNote:
    - It is recommended that input validation needs to be applied on the sensitive data the moment it is read back again, if observed. Please note that, Any process can override the data for any publicly accessible data storage.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-922: Insecure Storage of Sensitive Information
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>>  The Information Leaks via Logs...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/activity/result/ActivityResultRegistry.java
152:            Log.w(LOG_TAG, "Dropping pending result for request " + key + ": " + this.mParsedPendingResults.get(key));
156:            Log.w(LOG_TAG, "Dropping pending result for request " + key + ": " + this.mPendingResults.getParcelable(key));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/ActionBarDrawerToggle.java
221:            Log.w("ActionBarDrawerToggle", "DrawerToggle may not show up because NavigationIcon is not visible. You may need to call actionbar.setDisplayHomeAsUpEnabled(true);");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/ActionBarDrawerToggleHoneycomb.java
26:                Log.w(TAG, "Couldn't set home-as-up indicator via JB-MR2 API", e);
31:            Log.w(TAG, "Couldn't set home-as-up indicator");
45:                Log.w(TAG, "Couldn't set content description via JB-MR2 API", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/AppCompatDelegate.java
179:                Log.d(TAG, "setDefaultNightMode() called with an unknown mode");
262:                Log.d(TAG, "Checking for metadata for AppLocalesMetadataHolderService : Service not found");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/AppCompatDelegateImpl.java
1270:                    Log.i("AppCompatDelegate", "Failed to instantiate custom view inflater " + viewInflaterClassName + ". Falling back to default.", t);
1317:            Log.i("AppCompatDelegate", "The Activity's LayoutInflater already has a Factory installed so we can not install AppCompat's");
1647:                Log.w("AppCompatDelegate", "Couldn't get audio manager");
1776:            Log.i("AppCompatDelegate", "You should now use the AppCompatDelegate.FEATURE_SUPPORT_ACTION_BAR id when requesting this feature.");
1780:            Log.i("AppCompatDelegate", "You should now use the AppCompatDelegate.FEATURE_SUPPORT_ACTION_BAR_OVERLAY id when requesting this feature.");
2083:                Log.d("AppCompatDelegate", "Exception while getting ActivityInfo", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/AppCompatViewInflater.java
372:            Log.i(LOG_TAG, "app:theme is now deprecated. Please move to using android:theme instead.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/AppLocalesStorageHelper.java
89:            android.util.Log.w(r1, r5)     // Catch: java.lang.Throwable -> L4d
102:            android.util.Log.d(r1, r0)
119:            android.util.Log.w(r1, r3)
144:                        Log.d(TAG, "Storing App Locales : app-locales: " + locales + " persisted successfully.");
149:                        Log.w(TAG, "Storing App Locales : Failed to persist app-locales: " + locales, e);
166:            Log.w(TAG, String.format("Storing App Locales : FileNotFoundException: Cannot open file %s for writing ", APPLICATION_LOCALES_RECORD_FILE));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/ResourcesFlusher.java
31:                Log.e(TAG, "Could not retrieve Resources#mDrawableCache field", e);
41:                Log.e(TAG, "Could not retrieve value from Resources#mDrawableCache", e2);
56:                Log.e(TAG, "Could not retrieve Resources#mDrawableCache field", e);
66:                Log.e(TAG, "Could not retrieve value from Resources#mDrawableCache", e2);
82:                Log.e(TAG, "Could not retrieve Resources#mResourcesImpl field", e);
94:            Log.e(TAG, "Could not retrieve value from Resources#mResourcesImpl", e2);
105:                Log.e(TAG, "Could not retrieve ResourcesImpl#mDrawableCache field", e3);
115:                Log.e(TAG, "Could not retrieve value from ResourcesImpl#mDrawableCache", e4);
128:                Log.e(TAG, "Could not find ThemedResourceCache class", e);
142:                Log.e(TAG, "Could not retrieve ThemedResourceCache#mUnthemedEntries field", ee);
154:            Log.e(TAG, "Could not retrieve value from ThemedResourceCache#mUnthemedEntries", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/TwilightManager.java
49:        Log.i(TAG, "Could not get last known location. This is probably because the app does not have any location permissions. Falling back to hardcoded sunrise/sunset values.");
76:            Log.d(TAG, "Failed to get last known location", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/graphics/drawable/AnimatedStateListDrawableCompat.java
74:            Log.e(LOGTAG, "parser error", e);
77:            Log.e(LOGTAG, "parser error", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/view/SupportMenuInflater.java
476:                    Log.w(SupportMenuInflater.LOG_TAG, "Ignoring attribute 'actionProviderClass'. Action view already specified.");
534:                    Log.w(SupportMenuInflater.LOG_TAG, "Ignoring attribute 'itemActionViewLayout'. Action view already specified.");
577:                Log.w(SupportMenuInflater.LOG_TAG, "Cannot instantiate class: " + str, e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/view/menu/MenuItemImpl.java
102:                Log.e(TAG, "Can't find activity to handle intent; ignoring", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/view/menu/MenuItemWrapperICS.java
352:            Log.w(LOG_TAG, "Error while calling setExclusiveCheckable", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ActivityChooserModel.java
496:                    Log.e(LOG_TAG, "Error reading historical recrod file: " + this.mHistoryFileName, ioe);
501:                    Log.e(LOG_TAG, "Error reading historical recrod file: " + this.mHistoryFileName, xppe);
559:                                Log.e(ActivityChooserModel.LOG_TAG, "Error writing historical record file: " + ActivityChooserModel.this.mHistoryFileName, ioe);
567:                                Log.e(ActivityChooserModel.LOG_TAG, "Error writing historical record file: " + ActivityChooserModel.this.mHistoryFileName, iae);
575:                                Log.e(ActivityChooserModel.LOG_TAG, "Error writing historical record file: " + ActivityChooserModel.this.mHistoryFileName, ise);
612:                Log.e(ActivityChooserModel.LOG_TAG, "Error writing historical record file: " + historyFileName, fnfe);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/AppCompatReceiveContentHelper.java
46:            Log.i(LOG_TAG, "Can't handle drop: no activity: view=" + view);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/AppCompatSpinner.java
163:            android.util.Log.i(r4, r5, r3)     // Catch: java.lang.Throwable -> L57
749:            Log.e(AppCompatSpinner.TAG, "Cannot set popup background for MODE_DIALOG, ignoring");
754:            Log.e(AppCompatSpinner.TAG, "Cannot set vertical offset for MODE_DIALOG, ignoring");
759:            Log.e(AppCompatSpinner.TAG, "Cannot set horizontal offset for MODE_DIALOG, ignoring");
779:            Log.e(AppCompatSpinner.TAG, "Cannot set horizontal (original) offset for MODE_DIALOG, ignoring");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/AppCompatTextViewAutoSizeHelper.java
390:                    Log.w(TAG, "Failed to invoke TextView#nullLayouts() method", ex);
467:                Log.w(TAG, "Failed to invoke TextView#" + str + "() method", e);
488:            Log.w(TAG, "Failed to access TextView#" + str + " member", e);
502:            Log.w(TAG, "Failed to retrieve TextView#" + methodName + "() method", ex);
516:            Log.w(TAG, "Failed to access TextView#" + fieldName + " member", e);
542:                Log.w(AppCompatTextViewAutoSizeHelper.TAG, "Failed to obtain TextDirectionHeuristic, auto size may be incorrect");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ListPopupWindow.java
634:                        Log.e(TAG, "Invalid hint position " + this.mPromptPosition);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ResourceManagerInternal.java
217:                Log.e(TAG, "Exception while inflating drawable", e);
351:                Log.d(TAG, "Mutated drawable is not the same instance as the input.");
413:                Log.e("VdcInflateDelegate", "Exception while inflating <vector>", e);
429:                Log.e("AvdcInflateDelegate", "Exception while inflating <animated-vector>", e);
445:                Log.e("AsldcInflateDelegate", "Exception while inflating <animated-selector>", e);
467:                Log.e("DrawableDelegate", "Exception while inflating <drawable>", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/SearchView.java
843:            Log.w(LOG_TAG, "Could not find voice search activity");
1027:            Log.e(LOG_TAG, "Failed launch activity: " + intent, ex);
1142:            Log.w(LOG_TAG, "Search suggestions cursor at row " + rowNum + " returned exception.", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/SuggestionsAdapter.java
100:            Log.w(LOG_TAG, "Search suggestions query threw an exception.", e);
132:            Log.w(LOG_TAG, "Tried to change cursor after adapter was closed.");
150:            Log.e(LOG_TAG, "error changing cursor and caching columns", e);
314:            Log.w(LOG_TAG, "Search suggestions cursor threw exception.", e);
330:            Log.w(LOG_TAG, "Search suggestions cursor threw exception.", e);
356:            Log.w(LOG_TAG, "Icon resource not found: " + drawableId);
390:                    Log.e(LOG_TAG, "Error closing icon stream for " + uri, ex);
394:            Log.w(LOG_TAG, "Icon not found: " + uri + ", " + fnfe.getMessage());
397:        Log.w(LOG_TAG, "Icon not found: " + uri + ", " + fnfe.getMessage());
449:                Log.w(LOG_TAG, "Invalid icon resource " + iconId + " for " + component.flattenToShortString());
454:            Log.w(LOG_TAG, ex.toString());
471:            Log.e(LOG_TAG, "unexpected error retrieving valid column from cursor, did the remote process die?", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ThemeUtils.java
95:                Log.e(TAG, "View " + view.getClass() + " is an AppCompat widget that can only be used with a Theme.AppCompat theme (or descendant).");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ToolbarWidgetWrapper.java
229:        Log.i(TAG, "Progress display unsupported");
234:        Log.i(TAG, "Progress display unsupported");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/TooltipCompatHandler.java
153:                Log.e(TAG, "sActiveHandler.mPopup == null");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/TooltipPopup.java
99:            Log.e(TAG, "Cannot find app view");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ViewUtils.java
24:            Log.d(TAG, "Could not find method computeFitSystemWindows. Oh well.");
41:                Log.d(TAG, "Could not invoke computeFitSystemWindows", e);
54:            Log.d(TAG, "Could not invoke makeOptionalFitsSystemWindows", e);
56:            Log.d(TAG, "Could not find method makeOptionalFitsSystemWindows. Oh well...");
58:            Log.d(TAG, "Could not invoke makeOptionalFitsSystemWindows", e3);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/ArrayLinkedVariables.java
469:        System.out.print("{ ");
473:                System.out.print(v + " = " + getVariableValue(i) + " ");
476:        System.out.println(" }");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/LinearSystem.java
531:                    System.out.println("WTF");
797:        System.out.println(s + this.mGoal + "\n");
824:        System.out.println(s3);
835:        System.out.println(s + this.mGoal + "\n");
880:        System.out.println(s);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/SolverVariableValues.java
120:        System.out.print("{ ");
124:                System.out.print(v + " = " + getVariableValue(i) + " ");
127:        System.out.println(" }");
228:                System.out.println(str);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/Motion.java
1501:            System.out.println("TYPE_INTERPOLATOR  " + value);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/key/MotionKeyAttributes.java
260:        System.out.println(" ------------- " + this.mFramePosition + " -------------");
264:            System.out.println(names[i] + ":" + getFloatValue(id));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/key/MotionKeyCycle.java
554:        System.out.println("MotionKeyCycle{mWaveShape=" + this.mWaveShape + ", mWavePeriod=" + this.mWavePeriod + ", mWaveOffset=" + this.mWaveOffset + ", mWavePhase=" + this.mWavePhase + ", mRotation=" + this.mRotation + '}');

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/key/MotionKeyPosition.java
94:            System.out.println("distance ~ 0");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/parse/KeyParser.java
37:                    System.err.println("unknown type " + type);
45:                            System.out.println("parse " + type + " INT_MASK > " + value.getInt());
49:                            System.out.println("parse " + type + " FLOAT_MASK > " + value.getFloat());
53:                            System.out.println("parse " + type + " STRING_MASK > " + value.content());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/Easing.java
99:                System.err.println("transitionEasing syntax error syntax:transitionEasing=\"cubic(1.0,0.5,0.0,0.6)\" or " + Arrays.toString(NAMED_EASING));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/KeyFrameArray.java
28:            System.out.println("V: " + Arrays.toString(Arrays.copyOf(this.keys, this.count)));
29:            System.out.print("K: [");
32:                System.out.print((i == 0 ? "" : ", ") + valueAt(i));
35:            System.out.println("]");
105:            System.out.println("V: " + Arrays.toString(Arrays.copyOf(this.keys, this.count)));
106:            System.out.print("K: [");
109:                System.out.print((i == 0 ? "" : ", ") + valueAt(i));
112:            System.out.println("]");
182:            System.out.println("V: " + Arrays.toString(Arrays.copyOf(this.keys, this.count)));
183:            System.out.print("K: [");
186:                System.out.print((i == 0 ? "" : ", ") + Arrays.toString(valueAt(i)));
189:            System.out.println("]");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/SpringStopEngine.java
28:        System.out.println(line + str);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/StepCurve.java
60:        System.out.println(" 0 " + ms.getPos(0.0d, 0));
61:        System.out.println(" 1 " + ms.getPos(1.0d, 0));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/TimeCycleSplineSet.java
166:            System.err.println("Error no points added to " + this.mType);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/Utils.java
17:        System.out.println(tag + " : " + value);
21:        System.err.println(tag + " : " + value);
70:            System.out.println(msg + s + stack + s);
80:        System.out.println(ss + " " + str);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/parser/CLContainer.java
22:            System.out.println("added element " + element + " to " + this);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/parser/CLElement.java
47:            System.out.println("closing " + hashCode() + " -> " + this);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/parser/CLParser.java
109:            System.out.println("CREATE " + type + " at " + content[position]);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/state/State.java
391:                        System.out.println("couldn't find reference for " + keyRef);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/state/WidgetFrame.java
778:                System.out.println(ss + this.mCustom.get(key).toString());
792:        System.out.println(ss + " " + str);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/widgets/analyzer/DependencyGraph.java
578:        System.out.println("content:<<\n" + (content + "\n}\n") + "\n>>");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/helper/widget/Carousel.java
434:            Log.w(TAG, "No backward or forward transitions defined for Carousel!");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/helper/widget/CircularFlow.java
128:                        Log.e(TAG, "Added radius to view with id: " + this.mMap.get(Integer.valueOf(view.getId())));
145:                        Log.e(TAG, "Added angle to view with id: " + this.mMap.get(Integer.valueOf(view.getId())));
176:            Log.e(TAG, "It was not possible to update radius to view with id: " + view.getId());
191:            Log.e(TAG, "It was not possible to update angle to view with id: " + view.getId());
206:            Log.e(TAG, "It was not possible to update radius and angle to view with id: " + view.getId());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/helper/widget/MotionEffect.java
126:            Log.v(TAG, Debug.getLoc() + " views = null");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/utils/CustomSupport.java
69:            Log.e(TAG, "cannot access method " + methodName + " on View \"" + Debug.getName(view) + "\"");
72:            Log.e(TAG, "no method " + methodName + " on View \"" + Debug.getName(view) + "\"");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/utils/ViewOscillator.java
340:                    Log.e(ViewOscillator.TAG, "unable to setProgress", e2);
342:                    Log.e(ViewOscillator.TAG, "unable to setProgress", e3);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/utils/ViewSpline.java
402:                    Log.e(ViewSpline.TAG, "unable to setProgress", e2);
404:                    Log.e(ViewSpline.TAG, "unable to setProgress", e3);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/utils/ViewTimeCycle.java
450:                        Log.e(ViewTimeCycle.TAG, "unable to setProgress", e2);
452:                        Log.e(ViewTimeCycle.TAG, "unable to setProgress", e3);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/Debug.java
23:            Log.v(tag, msg + s + stack + s);
35:            System.out.println(msg + s + stack + s);
52:        System.out.println(loc + "------------- " + c.getName() + " --------------------");
58:                    System.out.println(loc + "    " + declaredField.getName() + " " + value);
63:        System.out.println(loc + "------------- " + c.getSimpleName() + " --------------------");
95:            Log.v("DEBUG", ex.toString());
163:        System.out.println(str + " children " + n);
166:            System.out.println(loc + "     " + getName(v));
174:                        System.out.println(loc + "       " + declaredField.getName() + " " + value);
185:        System.out.println(" >>>>>>>>>>>>>>>>>>. dump " + loc + "  " + param.getClass().getName());
192:                    System.out.println(loc + "       " + name + " " + value);
197:        System.out.println(" <<<<<<<<<<<<<<<<< dump " + loc);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/DesignTool.java
462:        System.out.println(" dumping  " + set + " (" + setId + ")");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/KeyAttributes.java
420:                        Log.e(KeyAttributes.NAME, "unused attribute 0x" + Integer.toHexString(attr) + "   " + mAttrMap.get(attr));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/KeyCycle.java
264:                    Log.v("WARNING! KeyCycle", "  UNKNOWN  " + key);
412:                            Log.v("WARNING KeyCycle", "  UNKNOWN  " + s);
569:                        Log.e(TypedValues.CycleType.NAME, "unused attribute 0x" + Integer.toHexString(attr) + "   " + mAttrMap.get(attr));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/KeyFrames.java
37:            Log.e(TAG, "unable to load", e);
81:                                Log.e(TAG, "unable to create ", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/KeyPosition.java
139:            System.out.println("distance ~ 0");
321:                        Log.e(TypedValues.PositionType.NAME, "unused attribute 0x" + Integer.toHexString(attr) + "   " + mAttrMap.get(attr));
327:                Log.e(TypedValues.PositionType.NAME, "no frame position");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/KeyTimeCycle.java
428:                        Log.e("KeyTimeCycle", "unused attribute 0x" + Integer.toHexString(attr) + "   " + mAttrMap.get(attr));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/KeyTrigger.java
349:                Log.e(TypedValues.TriggerType.NAME, "Could not find method \"" + str + "\"on class " + call.getClass().getSimpleName() + " " + Debug.getName(call));
356:            Log.e(TypedValues.TriggerType.NAME, "Exception in call \"" + this.mCross + "\"on class " + call.getClass().getSimpleName() + " " + Debug.getName(call));
427:                        Log.e(TypedValues.TriggerType.NAME, "unused attribute 0x" + Integer.toHexString(attr) + "   " + mAttrMap.get(attr));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/MotionConstrainedPoint.java
364:                                Log.e("MotionPaths", s + " ViewSpline not a CustomSet frame = " + mFramePosition + ", value" + custom.getValueToInterpolate() + ViewSpline);
371:                        Log.e("MotionPaths", "UNKNOWN spline " + s);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/MotionController.java
566:            Log.e(TAG, " KeyPath position \"" + point.position + "\" outside of range");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/MotionLayout.java
626:                Log.v(TAG, Debug.getLocation() + " transitionToStart ");
887:            Log.w(TAG, "Warning! Progress is defined for values between 0.0 and 1.0 inclusive");
1542:            Log.v(MotionLayout.TAG, str + (((((((((((a + (params.startToEnd != -1 ? "|SE" : "|__")) + (params.endToStart != -1 ? "|ES" : "|__")) + (params.endToEnd != -1 ? "|EE" : "|__")) + (params.leftToLeft != -1 ? "|LL" : "|__")) + (params.leftToRight != -1 ? "|LR" : "|__")) + (params.rightToLeft != -1 ? "|RL" : "|__")) + (params.rightToRight != -1 ? "|RR" : "|__")) + (params.topToTop != -1 ? "|TT" : "|__")) + (params.topToBottom != -1 ? "|TB" : "|__")) + (params.bottomToTop != -1 ? "|BT" : "|__")) + (params.bottomToBottom != -1 ? "|BB" : "|__")));
1576:            Log.v(MotionLayout.TAG, str + a4 + " ---  " + child);
1581:            Log.v(MotionLayout.TAG, cName + "  ========= " + c);
1593:                Log.v(MotionLayout.TAG, str + "  " + name + " " + child + " " + a2);
1595:            Log.v(MotionLayout.TAG, cName + " done. ");
1704:                            Log.e(MotionLayout.TAG, Debug.getLocation() + "no widget for  " + Debug.getName(v2) + " (" + v2.getClass().getName() + ")");
1714:                            Log.e(str, Debug.getLocation() + "no widget for  " + Debug.getName(v2) + " (" + v2.getClass().getName() + ")");
2259:            Log.v(TAG, " " + Debug.getLocation() + " " + Debug.getName(this) + " " + Debug.getName(getContext(), this.mCurrentState) + " " + Debug.getName(child) + child.getLeft() + " " + child.getTop());
2625:                Log.e(TAG, "WARNING NO app:layoutDescription tag");
2654:            Log.e(TAG, "CHECK: motion scene not set! set \"app:layoutDescription=\"@xml/file\"");
2666:                Log.v(TAG, "CHECK: CURRENT");
2674:                Log.e(TAG, "CHECK: two transitions with the same start and end " + startString + "->" + endString);
2677:                Log.e(TAG, "CHECK: you can't have reverse transitions" + startString + "->" + endString);
2682:                Log.e(TAG, " no such constraintSetStart " + startString);
2685:                Log.e(TAG, " no such constraintSetEnd " + startString);
2697:                Log.w(TAG, "CHECK: " + setName + " ALL VIEWS SHOULD HAVE ID's " + v.getClass().getName() + " does not!");
2701:                Log.w(TAG, "CHECK: " + setName + " NO CONSTRAINTS for " + Debug.getName(v));
2709:                Log.w(TAG, "CHECK: " + setName + " NO View matches id " + idString);
2712:                Log.w(TAG, "CHECK: " + setName + "(" + idString + ") no LAYOUT_HEIGHT");
2715:                Log.w(TAG, "CHECK: " + setName + "(" + idString + ") no LAYOUT_HEIGHT");
2722:            Log.e(TAG, "CHECK: start and end constraint set should not be the same!");
2932:        Log.w(TAG, "WARNING could not find view id " + idName);
3167:        Log.e(TAG, "This method is deprecated. Please call rebuildScene() instead.");
3244:            Log.e(TAG, "MotionScene not defined");
3309:            Log.e(TAG, " no motionScene");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/MotionScene.java
658:                Log.e(TypedValues.MotionScene.NAME, "OnClick could not find id " + this.mTargetId);
668:                    Log.e(TypedValues.MotionScene.NAME, " (*)  could not find id " + this.mTargetId);
949:                                System.out.println("parsing = " + tagName);
1042:                                        Log.v(TypedValues.MotionScene.NAME, " OnSwipe (" + name + ".xml:" + line + ")");
1116:                System.out.println("id getMap res = " + id);
1124:            Log.e(TypedValues.MotionScene.NAME, "error in parsing id");
1183:                System.out.println("id string = " + value);
1301:            System.out.println("id " + id);
1302:            System.out.println("size " + this.mConstraintSetMap.size());
1308:                System.out.println("Id for <" + i + "> is <" + IdAsString + "> looking for <" + id + ">");
1325:            System.out.println("id " + id);
1326:            System.out.println("size " + this.mConstraintSetMap.size());
1333:            Log.e(TypedValues.MotionScene.NAME, "Warning could not find ConstraintSet id/" + Debug.getName(this.mMotionLayout.getContext(), id) + " In MotionScene");
1737:                Log.e(TypedValues.MotionScene.NAME, "Cannot be derived from yourself");
1769:                Log.e(TypedValues.MotionScene.NAME, "ERROR! invalid deriveConstraintsFrom: @id/" + Debug.getName(this.mMotionLayout.getContext(), derivedFromId));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/TouchResponse.java
377:                            Log.e(TAG, "could not find view to animate to");
665:            Log.e(TAG, "cannot find TouchAnchorId @id/" + Debug.getName(this.mMotionLayout.getContext(), this.mTouchAnchorId));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/ViewTransition.java
214:                                    Log.e(TAG, Debug.getLoc() + " unknown tag " + tagName);
215:                                    Log.e(TAG, ".xml:" + parser.getLineNumber());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/ViewTransitionController.java
61:                Log.w(this.TAG, "No support for ViewTransition within transition yet. Currently: " + this.mMotionLayout.toString());
119:            Log.e(this.TAG, " Could not find ViewTransition");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/utils/widget/MotionLabel.java
414:            Log.v(TAG, Debug.getLoc() + " scale " + scale);
771:        Log.v(TAG, Debug.getLoc() + "  " + size + " / " + this.mBaseTextSize);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintAttribute.java
341:                Log.e(TAG, " Custom Attribute \"" + name + "\" not found on " + cls.getName());
344:                Log.e(TAG, e2.getMessage());
345:                Log.e(TAG, " Custom Attribute \"" + name + "\" not found on " + cls.getName());
346:                Log.e(TAG, cls.getName() + " must have a method " + methodName);
348:                Log.e(TAG, " Custom Attribute \"" + name + "\" not found on " + cls.getName());
398:            Log.e(TAG, " Custom Attribute \"" + name + "\" not found on " + cls.getName());
401:            Log.e(TAG, e2.getMessage());
402:            Log.e(TAG, " Custom Attribute \"" + name + "\" not found on " + cls.getName());
403:            Log.e(TAG, cls.getName() + " must have a method " + methodName);
405:            Log.e(TAG, " Custom Attribute \"" + name + "\" not found on " + cls.getName());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintHelper.java
106:            Log.e("ConstraintHelper", "Views added to a ConstraintHelper need to have an id");
109:                Log.e("ConstraintHelper", "Views added to a ConstraintHelper need to have a parent");
216:            Log.w("ConstraintHelper", "Could not find id of \"" + idString2 + "\"");
230:            Log.w("ConstraintHelper", "Parent not a ConstraintLayout");
241:                        Log.w("ConstraintHelper", "to use ConstraintTag view " + v.getClass().getSimpleName() + " must have an ID");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintLayout.java
1768:                            Log.e(ConstraintLayout.TAG, "layout_constraintWidth_default=\"wrap\" is deprecated.\nUse layout_width=\"WRAP_CONTENT\" and layout_constrainedWidth=\"true\" instead.");
1777:                            Log.e(ConstraintLayout.TAG, "layout_constraintHeight_default=\"wrap\" is deprecated.\nUse layout_height=\"WRAP_CONTENT\" and layout_constrainedHeight=\"true\" instead.");
2282:            Log.v(TAG, " setDebugName " + this.mLayoutWidget.getDebugName());
2296:                    Log.v(TAG, " setDebugName " + child.getDebugName());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintLayoutStates.java
79:            Log.v("ConstraintLayoutStates", "NO Constraint set found ! id=" + id + ", dim =" + width + ", " + height);
183:                    Log.v("ConstraintLayoutStates", "Unknown tag");
296:                        Log.e("ConstraintLayoutStates", "error in parsing id");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintSet.java
1175:                        Log.w(ConstraintSet.TAG, "Unknown attribute 0x" + Integer.toHexString(attr) + "   " + mapToConstant.get(attr));
1193:                        Log.e(ConstraintSet.TAG, "CURRENTLY UNSUPPORTED");
1253:                        Log.w(ConstraintSet.TAG, "unused attribute 0x" + Integer.toHexString(attr) + "   " + mapToConstant.get(attr));
1690:                Log.v(tag, "int");
1692:                    Log.v(tag, this.mTypeInt[i] + " = " + this.mValueInt[i]);
1694:                Log.v(tag, TypedValues.Custom.S_FLOAT);
1696:                    Log.v(tag, this.mTypeFloat[i2] + " = " + this.mValueFloat[i2]);
1698:                Log.v(tag, "strings");
1700:                    Log.v(tag, this.mTypeString[i3] + " = " + this.mValueString[i3]);
1702:                Log.v(tag, TypedValues.Custom.S_BOOLEAN);
1704:                    Log.v(tag, this.mTypeBoolean[i4] + " = " + this.mValueBoolean[i4]);
1721:                Log.v(tag, "DELTA IS NULL");
2030:                Log.w(TAG, "id unknown " + Debug.getName(view));
2066:                Log.w(TAG, "id unknown " + Debug.getName(view));
2135:                        Log.v(TAG, "WARNING NO CONSTRAINTS for view " + id);
3082:                Log.w(TAG, " Unable to parse " + sp[i]);
3094:                Log.w(TAG, " Unable to parse " + sp[i]);
3106:                Log.w(TAG, " Unable to parse " + sp[i]);
3115:            Log.w(TAG, " Unable to parse " + sp[i]);
3452:                    Log.w(TAG, "Unknown attribute 0x" + Integer.toHexString(attr) + "   " + mapToConstant.get(attr));
3627:                    Log.e(TAG, "CURRENTLY UNSUPPORTED");
3703:                    Log.w(TAG, "unused attribute 0x" + Integer.toHexString(attr) + "   " + mapToConstant.get(attr));
3822:                Log.w(TAG, "Unknown attribute 0x");
3968:                Log.w(TAG, "Unknown attribute 0x");
3995:                Log.w(TAG, "Unknown attribute 0x");
4018:                Log.w(TAG, "Unknown attribute 0x");
4256:                    Log.e(TAG, "CURRENTLY UNSUPPORTED");
4325:                    Log.w(TAG, "unused attribute 0x" + Integer.toHexString(attr) + "   " + mapToConstant.get(attr));
4331:                    Log.w(TAG, "Unknown attribute 0x" + Integer.toHexString(attr) + "   " + mapToConstant.get(attr));
4435:        System.out.println(set.size() + " constraints");
4447:        System.out.println(stringBuilder.toString());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/Constraints.java
144:        Log.v(TAG, " ################# init");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/StateSet.java
347:                    Log.v("ConstraintLayoutStates", "Unknown tag");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/coordinatorlayout/widget/CoordinatorLayout.java
519:            Log.e(TAG, "No keylines defined for " + this + " - attempted index lookup " + index);
523:            Log.e(TAG, "Keyline index " + index + " out of range for " + this);
569:                    Log.e(TAG, "Attached behavior class is null");
586:                        Log.e(TAG, "Default behavior class " + defaultBehavior.value().getName() + " could not be instantiated. Did you forget a default constructor?", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/ActivityRecreator.java
153:                            Log.e(ActivityRecreator.LOG_TAG, "Exception while invoking performStopActivity", t);
161:            Log.e(LOG_TAG, "Exception while fetching field values", t);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/BundleCompat.java
30:                    Log.i(TAG, "Failed to retrieve getIBinder method", e);
39:                    Log.i(TAG, "Failed to invoke getIBinder via reflection", e2);
53:                    Log.i(TAG, "Failed to retrieve putIBinder method", e);
62:                    Log.i(TAG, "Failed to invoke putIBinder via reflection", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/NavUtils.java
49:            Log.e(TAG, "getParentActivityIntent: bad parentActivityName '" + parentName + "' in manifest");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/NotificationCompatJellybean.java
72:                        Log.e(TAG, "Notification.extras field is not of type Bundle");
86:                Log.e(TAG, "Unable to access notification extras", e);
90:                Log.e(TAG, "Unable to access notification extras", e2);
147:                    Log.e(TAG, "Unable to access notification actions", e);
173:                Log.e(TAG, "Unable to access notification actions", e);
195:            Log.e(TAG, "Unable to access notification actions", e);
198:            Log.e(TAG, "Unable to access notification actions", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/NotificationManagerCompat.java
357:                Log.d(NotificationManagerCompat.TAG, "Connected to service " + componentName);
365:                Log.d(NotificationManagerCompat.TAG, "Disconnected from service " + componentName);
382:                        Log.w(NotificationManagerCompat.TAG, "Permission present on component " + componentName + ", not adding listener record.");
391:                        Log.d(NotificationManagerCompat.TAG, "Adding listener record for " + componentName2);
401:                        Log.d(NotificationManagerCompat.TAG, "Removing listener record for " + entry.getKey());
418:                Log.w(NotificationManagerCompat.TAG, "Unable to bind to listener " + record.componentName);
438:                Log.w(NotificationManagerCompat.TAG, "Giving up on delivering " + record.taskQueue.size() + " tasks to " + record.componentName + " after " + record.retryCount + " retries");
444:                Log.d(NotificationManagerCompat.TAG, "Scheduling retry for " + delayMs + " ms");
452:                Log.d(NotificationManagerCompat.TAG, "Processing component " + record.componentName + ", " + record.taskQueue.size() + " queued tasks");
468:                        Log.d(NotificationManagerCompat.TAG, "Sending task " + task);
474:                        Log.d(NotificationManagerCompat.TAG, "Remote service has died: " + record.componentName);
477:                    Log.w(NotificationManagerCompat.TAG, "RemoteException communicating with " + record.componentName, e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/ShareCompat.java
502:                Log.e(TAG, "Could not retrieve icon for calling activity", e);
515:                Log.e(TAG, "Could not retrieve icon for calling application", e);
528:                Log.e(TAG, "Could not retrieve label for calling application", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/TaskStackBuilder.java
90:            Log.e(TAG, "Bad ComponentName while traversing activity parent metadata");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/ContextCompat.java
168:                Log.w(TAG, "Unable to create files subdir " + file.getPath());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/PackageManagerCompat.java
36:            Log.e(LOG_TAG, "User is in locked direct boot mode");
46:            Log.e(LOG_TAG, "Target SDK version below API 30");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/UnusedAppRestrictionsBackportServiceConnection.java
75:                Log.e(PackageManagerCompat.LOG_TAG, "Unable to retrieve the permission revocation setting from the backport");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/pm/ShortcutXmlParser.java
67:            Log.e(TAG, "Failed to parse the Xml resource: ", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/res/ColorStateListInflaterCompat.java
31:            Log.e("CSLCompat", "Failed to inflate ColorStateList.", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/res/ComplexColorCompat.java
76:            Log.e(LOG_TAG, "Failed to inflate ComplexColor.", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/res/ResourcesCompat.java
77:            Log.w(TAG, "Failed to inflate ColorStateList, leaving it to the framework", e);
374:                            Log.i(ResourcesCompat.TAG, "Failed to retrieve rebase() method", e);
383:                            Log.i(ResourcesCompat.TAG, "Failed to invoke rebase() method via reflection", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/PathParser.java
547:                Log.w(PathParser.LOGTAG, " Points are coincident");
552:                Log.w(PathParser.LOGTAG, "Points are too far apart " + dsq);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatApi21Impl.java
51:            Log.e(TAG, e.getClass().getName(), e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatApi24Impl.java
45:            Log.e(TAG, e.getClass().getName(), e);
60:            Log.w(TAG, "Unable to collect necessary private methods.Fallback to legacy implementation.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatApi26Impl.java
57:            Log.e(TAG, "Unable to collect necessary methods for class " + e.getClass().getName(), e);
77:            Log.w(TAG, "Unable to collect necessary private methods. Fallback to legacy implementation.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatBaseImpl.java
59:            Log.e(TAG, "Could not retrieve font from family.", e);
62:            Log.e(TAG, "Could not retrieve font from family.", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatUtil.java
128:                Log.e(TAG, "Error copying resource contents to temp file: " + e.getMessage());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/WeightTypefaceApi14.java
26:            Log.e(TAG, e.getClass().getName(), e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/WeightTypefaceApi21.java
39:            Log.e(TAG, e.getClass().getName(), e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/WeightTypefaceApi26.java
34:            Log.e(TAG, e.getClass().getName(), e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/drawable/IconCompat.java
275:                    Log.i(TAG, "Found obfuscated resource, not trying to update resource id for it");
282:                    Log.i(TAG, "Id has changed for " + appPackage + " " + fullResName);
308:                    Log.e(TAG, String.format("Unable to load resource 0x%08x from pkg=%s", Integer.valueOf(this.mInt1), this.mObj1), e);
339:                Log.w(TAG, "Unable to load image from URI: " + uri, e);
346:            Log.w(TAG, "Unable to load image from path: " + uri, e2);
363:            Log.e(TAG, String.format("Unable to find pkg=%s for icon", resPackage), e);
613:                Log.w(TAG, "Unknown type " + type);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/drawable/RoundedBitmapDrawableFactory.java
48:            Log.w(TAG, "RoundedBitmapDrawable cannot decode " + filepath);
56:            Log.w(TAG, "RoundedBitmapDrawable cannot decode " + is);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/drawable/WrappedDrawableApi21.java
96:                Log.w(TAG, "Error calling Drawable#isProjected() method", ex);
107:                Log.w(TAG, "Failed to retrieve Drawable#isProjected() method", ex);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/text/ICUCompat.java
28:            Log.w(TAG, e);
30:            Log.w(TAG, e2);
44:            Log.w(TAG, e);
46:            Log.w(TAG, e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/util/AtomicFile.java
57:            Log.e(LOG_TAG, "Failed to sync file output stream");
62:            Log.e(LOG_TAG, "Failed to close file output stream", e);
72:            Log.e(LOG_TAG, "Failed to sync file output stream");
77:            Log.e(LOG_TAG, "Failed to close file output stream", e);
80:            Log.e(LOG_TAG, "Failed to delete new file " + this.mNewName);
89:            Log.e(LOG_TAG, "Failed to delete outdated new file " + this.mNewName);
128:            Log.e(LOG_TAG, "Failed to delete file which is a directory " + target);
131:            Log.e(LOG_TAG, "Failed to rename " + source + " to " + target);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/util/LogWriter.java
40:            Log.d(this.mTag, this.mBuilder.toString());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/ActionProvider.java
78:            Log.w(TAG, "setVisibilityListener: Setting a new ActionProvider.VisibilityListener when one is already set. Are you reusing this " + getClass().getSimpleName() + " instance while it is still in use somewhere else?");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/LayoutInflaterCompat.java
46:                Log.e(TAG, "forceSetFactory2 Could not find field 'mFactory2' on class " + LayoutInflater.class.getName() + "; inflation may have unexpected results.", e);
55:                Log.e(TAG, "forceSetFactory2 could not set the Factory2 on LayoutInflater " + inflater + "; inflation may have unexpected results.", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/MenuItemCompat.java
61:        Log.w(TAG, "setActionProvider: item does not implement SupportMenuItem; ignoring");
69:        Log.w(TAG, "getActionProvider: item does not implement SupportMenuItem; returning null");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/ViewCompat.java
533:            Log.e(TAG, "Couldn't find method", e);
726:                Log.e(TAG, "Unable to find childrenDrawingOrderEnabled", e);
733:            Log.e(TAG, "Unable to invoke childrenDrawingOrderEnabled", e2);
735:            Log.e(TAG, "Unable to invoke childrenDrawingOrderEnabled", e3);
737:            Log.e(TAG, "Unable to invoke childrenDrawingOrderEnabled", e4);
858:            Log.d(TAG, "performReceiveContent: " + payload + ", view=" + view.getClass().getSimpleName() + "[" + view.getId() + "]");
1473:                Log.e(TAG, view.getParent().getClass().getSimpleName() + " does not fully implement ViewParent", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/ViewConfigurationCompat.java
38:                Log.i(TAG, "Could not find method getScaledScrollFactor() on ViewConfiguration");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/ViewParentCompat.java
53:                Log.e(TAG, "ViewParent " + parent + " does not implement interface method onStartNestedScroll", e);
67:                Log.e(TAG, "ViewParent " + parent + " does not implement interface method onNestedScrollAccepted", e);
79:                Log.e(TAG, "ViewParent " + parent + " does not implement interface method onStopNestedScroll", e);
97:                Log.e(TAG, "ViewParent " + parent + " does not implement interface method onNestedScroll", e);
109:                Log.e(TAG, "ViewParent " + parent + " does not implement interface method onNestedPreScroll", e);
118:            Log.e(TAG, "ViewParent " + parent + " does not implement interface method onNestedFling", e);
127:            Log.e(TAG, "ViewParent " + parent + " does not implement interface method onNestedPreFling", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/WindowInsetsCompat.java
548:                    Log.w(WindowInsetsCompat.TAG, "Failed to get visible insets. getViewRootImpl() returned null from the provided view. This means that the view is either not attached or the method has been overridden", new NullPointerException());
558:                Log.e(WindowInsetsCompat.TAG, "Failed to get visible insets. (Reflection error). " + e.getMessage(), e);
579:                Log.e(WindowInsetsCompat.TAG, "Failed to get visible insets. (Reflection error). " + e.getMessage(), e);
984:                    Log.i(WindowInsetsCompat.TAG, "Could not retrieve WindowInsets.CONSUMED field", e);
996:                    Log.i(WindowInsetsCompat.TAG, "Could not get value from WindowInsets.CONSUMED field", e2);
1003:                    Log.i(WindowInsetsCompat.TAG, "Could not retrieve WindowInsets(Rect) constructor", e3);
1012:                    Log.i(WindowInsetsCompat.TAG, "Could not invoke WindowInsets(Rect) constructor", e4);
1275:                Log.w(WindowInsetsCompat.TAG, "Failed to get visible insets from AttachInfo " + e.getMessage(), e);
1297:                Log.w(WindowInsetsCompat.TAG, "Failed to get insets from AttachInfo. " + e.getMessage(), e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/accessibility/AccessibilityNodeInfoCompat.java
208:                    Log.e(TAG, "Failed to execute command with argument class ViewCommandArgument: " + className, e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/inputmethod/InputConnectionCompat.java
184:                Log.w(LOG_TAG, "Can't insert content from IME; requestPermission() failed", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/widget/CheckedTextViewCompat.java
84:                    Log.i(CheckedTextViewCompat.TAG, "Failed to retrieve mCheckMarkDrawable field", e);
93:                    Log.i(CheckedTextViewCompat.TAG, "Failed to get check mark drawable via reflection", e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/widget/NestedScrollView.java
559:                        Log.e(TAG, "Invalid pointerId=" + activePointerId + " in onInterceptTouchEvent");
631:                    Log.e(TAG, "Invalid pointerId=" + this.mActivePointerId + " in onTouchEvent");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/widget/TextViewCompat.java
65:            Log.e(LOG_TAG, "Could not retrieve " + fieldName + " field.");
74:            Log.d(LOG_TAG, "Could not retrieve value of " + field.getName() + " field.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/widget/TextViewOnReceiveContentListener.java
21:            Log.d(LOG_TAG, "onReceive: " + payload);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/customview/widget/ViewDragHelper.java
785:            Log.e(TAG, "Ignoring pointerId=" + pointerId + " because ACTION_DOWN was not received for this pointer before ACTION_MOVE. It likely happened because  ViewDragHelper did not receive all the events in the event stream.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/documentfile/provider/DocumentsContractApi19.java
89:            Log.w(TAG, "Failed query: " + e);
103:            Log.w(TAG, "Failed query: " + e);
121:            Log.w(TAG, "Failed query: " + e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/documentfile/provider/RawDocumentFile.java
31:            Log.w("DocumentFile", "Failed to createFile: " + e);
153:                    Log.w("DocumentFile", "Failed to delete " + file);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/documentfile/provider/TreeDocumentFile.java
129:                Log.w("DocumentFile", "Failed query: " + e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/BackStackRecord.java
280:            Log.v(TAG, "Bump nesting in " + this + " by " + amt);
288:                    Log.v(TAG, "Bump nesting of " + op.mFragment + " to " + op.mFragment.mBackStackNesting);
330:            Log.v(TAG, "Commit: " + this);
349:            Log.v(TAG, "Run: " + this);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/BackStackState.java
110:                Log.v(TAG, "Instantiate " + bse + " op #" + num + " base fragment #" + this.mOps[pos2]);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/DefaultSpecialEffectsController.java
183:                                Log.v("FragmentManager", "Ignoring Animator set on " + fragment + " as this Fragment was involved in a Transition.");
226:                    Log.v("FragmentManager", "Ignoring Animation set on " + fragment2 + " as Animations cannot run alongside Transitions.");
231:                    Log.v("FragmentManager", "Ignoring Animation set on " + fragment2 + " as Animations cannot run alongside Animators.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/DialogFragment.java
90:                                Log.d("FragmentManager", "DialogFragment " + this + " setting the content view on " + DialogFragment.this.mDialog);
143:                                Log.d("FragmentManager", "DialogFragment " + this + " setting the content view on " + DialogFragment.this.mDialog);
159:            Log.d("FragmentManager", "Setting style and theme for DialogFragment " + this + " to " + style + ", " + theme);
354:                    Log.d("FragmentManager", "mShowsDialog = false: " + message);
356:                    Log.d("FragmentManager", "mCreatingDialog = true: " + message);
363:            Log.d("FragmentManager", "get layout inflater for DialogFragment " + this + " from dialog context");
392:            Log.d("FragmentManager", "onCreateDialog called for DialogFragment " + this);
405:                Log.d("FragmentManager", "onDismiss called for DialogFragment " + this);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/Fragment.java
203:                Log.d("FragmentManager", "Could not find Application instance from Context " + requireContext().getApplicationContext() + ", you will not be able to use AndroidViewModel with the default ViewModelProvider.Factory");
710:            Log.v("FragmentManager", "Fragment " + this + " received the following in startIntentSenderForResult() requestCode: " + requestCode + " IntentSender: " + intent + " fillInIntent: " + fillInIntent + " options: " + options);
718:            Log.v("FragmentManager", "Fragment " + this + " received the following in onActivityResult(): requestCode: " + requestCode + " resultCode: " + resultCode + " data: " + data);
1376:            Log.d("FragmentManager", "moveto RESTORE_VIEW_STATE: " + this);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentLayoutInflaterFactory.java
69:                    Log.v(TAG, "Fragment " + fragment + " has been inflated via the <fragment> tag: id=0x" + Integer.toHexString(id));
81:                    Log.v(TAG, "Retained Fragment " + fragment + " has been re-attached via the <fragment> tag: id=0x" + Integer.toHexString(id));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentManager.java
255:        Log.e(TAG, ex.getMessage());
256:        Log.e(TAG, "Activity state:");
265:                Log.e(TAG, "Failed dumping state", e);
273:            Log.e(TAG, "Failed dumping state", e2);
860:                Log.d(TAG, "Ignoring moving " + f + " to state " + this.mCurState + "since it is not added to " + this);
943:            Log.v(TAG, "add: " + fragment);
964:            Log.v(TAG, "remove: " + fragment + " nesting=" + fragment.mBackStackNesting);
980:            Log.v(TAG, "hide: " + fragment);
992:            Log.v(TAG, "show: " + fragment);
1003:            Log.v(TAG, "detach: " + fragment);
1009:                    Log.v(TAG, "remove from detach: " + fragment);
1023:            Log.v(TAG, "attach: " + fragment);
1030:                    Log.v(TAG, "add from attach: " + fragment);
1682:                Log.v(TAG, "saveAllState: no fragments!");
1695:                    Log.v(TAG, "saveAllState: adding back stack #" + i + ": " + this.mBackStack.get(i));
1741:                        Log.v(TAG, "restoreSaveState: re-attaching retained " + retainedFragment);
1750:                    Log.v(TAG, "restoreSaveState: active (" + f.mWho + "): " + f);
1760:                    Log.v(TAG, "Discarding retained Fragment " + f2 + " that was not found in the set of active Fragments " + fms.mActive);
1777:                    Log.v(TAG, "restoreAllState: back stack #" + i + " (index " + bse.mIndex + "): " + bse);
1874:                        Log.w(FragmentManager.TAG, "No Activities were started for result for " + this);
1881:                        Log.w(FragmentManager.TAG, "Activity result delivered for unknown Fragment " + fragmentWho);
1892:                        Log.w(FragmentManager.TAG, "No IntentSenders were started for " + this);
1899:                        Log.w(FragmentManager.TAG, "Intent Sender result delivered for unknown Fragment " + fragmentWho);
1922:                        Log.w(FragmentManager.TAG, "No permissions were requested for " + this);
1929:                        Log.w(FragmentManager.TAG, "Permission request result delivered for unknown Fragment " + fragmentWho);
1984:                Log.v(TAG, "ActivityOptions " + options + " were added to fillInIntent " + fillInIntent2 + " for fragment " + f);
1992:            Log.v(TAG, "Fragment " + f + "is launching an IntentSender for result ");
2500:                Log.v(FragmentManager.TAG, "CreateIntent created the following intent: " + result);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentManagerViewModel.java
52:            Log.d(TAG, "onCleared called for " + this);
66:                Log.v(TAG, "Ignoring addRetainedFragment as the state is already saved");
74:                Log.v(TAG, "Updating retained Fragments: Added " + fragment);
104:                Log.v(TAG, "Ignoring removeRetainedFragment as the state is already saved");
109:                Log.v(TAG, "Updating retained Fragments: Removed " + fragment);
139:            Log.d(TAG, "Clearing non-config state for " + f);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentStateManager.java
70:            Log.v(TAG, "Instantiated fragment " + instantiate);
158:            Log.v(TAG, "computeExpectedState() of " + maxState + " for " + this.mFragment);
195:                Log.v(TAG, "Ignoring re-entrant call to moveToExpectedState() for " + getFragment());
259:                                    Log.d(TAG, "movefrom ACTIVITY_CREATED: " + this.mFragment);
309:                Log.d(TAG, "moveto CREATE_VIEW: " + this.mFragment);
361:            Log.d(TAG, "moveto ATTACHED: " + this.mFragment);
394:            Log.d(TAG, "moveto CREATED: " + this.mFragment);
419:            Log.d(TAG, "moveto CREATE_VIEW: " + this.mFragment);
483:                            Log.v(TAG, "requestFocus: Saved focused view " + focusedView + " for Fragment " + this.mFragment);
502:            Log.d(TAG, "moveto ACTIVITY_CREATED: " + this.mFragment);
514:            Log.d(TAG, "moveto STARTED: " + this.mFragment);
523:            Log.d(TAG, "moveto RESUMED: " + this.mFragment);
529:                Log.v(TAG, "requestFocus: Restoring focused view " + focusedView + " " + (success ? "succeeded" : "failed") + " on Fragment " + this.mFragment + " resulting in focused view " + this.mFragment.mView.findFocus());
555:            Log.d(TAG, "movefrom RESUMED: " + this.mFragment);
564:            Log.d(TAG, "movefrom STARTED: " + this.mFragment);
650:            Log.d(TAG, "movefrom CREATE_VIEW: " + this.mFragment);
669:            Log.d(TAG, "movefrom CREATED: " + this.mFragment);
713:            Log.d(TAG, "movefrom ATTACHED: " + this.mFragment);
728:                Log.d(TAG, "initState called for fragment: " + this.mFragment);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentStatePagerAdapter.java
196:                        Log.w(TAG, "Bad fragment at key " + key);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentStore.java
47:                    Log.v(TAG, "restoreSaveState: added (" + who + "): " + f);
70:            Log.v(TAG, "Added fragment to active set " + f);
131:            Log.v(TAG, "Removed fragment from active set " + f);
150:                    Log.v(TAG, "Saved state of " + f + ": " + fs.mSavedFragmentState);
169:                    Log.v(TAG, "saveAllState: adding fragment (" + f.mWho + "): " + f);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/LogWriter.java
40:            Log.d(this.mTag, this.mBuilder.toString());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/SpecialEffectsController.java
90:            Log.v("FragmentManager", "SpecialEffectsController: Enqueuing add operation for fragment " + fragmentStateManager.getFragment());
98:            Log.v("FragmentManager", "SpecialEffectsController: Enqueuing show operation for fragment " + fragmentStateManager.getFragment());
106:            Log.v("FragmentManager", "SpecialEffectsController: Enqueuing hide operation for fragment " + fragmentStateManager.getFragment());
114:            Log.v("FragmentManager", "SpecialEffectsController: Enqueuing remove operation for fragment " + fragmentStateManager.getFragment());
201:                        Log.v("FragmentManager", "SpecialEffectsController: Cancelling operation " + operation);
236:                    Log.v("FragmentManager", "SpecialEffectsController: " + (attachedToWindow ? "" : "Container " + this.mContainer + " is not attached to window. ") + "Cancelling running operation " + operation);
245:                    Log.v("FragmentManager", "SpecialEffectsController: " + (attachedToWindow ? "" : "Container " + this.mContainer + " is not attached to window. ") + "Cancelling pending operation " + operation2);
321:                                Log.v("FragmentManager", "SpecialEffectsController: Removing view " + view + " from container " + parent);
329:                            Log.v("FragmentManager", "SpecialEffectsController: Setting view " + view + " to VISIBLE");
335:                            Log.v("FragmentManager", "SpecialEffectsController: Setting view " + view + " to GONE");
341:                            Log.v("FragmentManager", "SpecialEffectsController: Setting view " + view + " to INVISIBLE");
405:                            Log.v("FragmentManager", "SpecialEffectsController: For fragment " + this.mFragment + " mFinalState = REMOVED -> VISIBLE. mLifecycleImpact = " + this.mLifecycleImpact + " to ADDING.");
414:                        Log.v("FragmentManager", "SpecialEffectsController: For fragment " + this.mFragment + " mFinalState = " + this.mFinalState + " -> REMOVED. mLifecycleImpact  = " + this.mLifecycleImpact + " to REMOVING.");
422:                            Log.v("FragmentManager", "SpecialEffectsController: For fragment " + this.mFragment + " mFinalState = " + this.mFinalState + " -> " + finalState + ". ");
461:                Log.v("FragmentManager", "SpecialEffectsController: " + this + " has called complete.");
535:                        Log.v("FragmentManager", "requestFocus: Saved focused view " + focusedView + " for Fragment " + fragment);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/legacy/content/WakefulBroadcastReceiver.java
54:            Log.w("WakefulBroadcastReceiv.", "No active wake lock id #" + id);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/loader/app/LoaderManagerImpl.java
52:                Log.v(LoaderManagerImpl.TAG, "  Starting: " + this);
60:                Log.v(LoaderManagerImpl.TAG, "  Stopping: " + this);
101:                Log.v(LoaderManagerImpl.TAG, "  Destroying: " + this);
123:                Log.v(LoaderManagerImpl.TAG, "onLoadComplete: " + this);
130:                Log.w(LoaderManagerImpl.TAG, "onLoadComplete was incorrectly called on a background thread");
197:                Log.v(LoaderManagerImpl.TAG, "  onLoadFinished in " + this.mLoader + ": " + this.mLoader.dataToString(data));
210:                    Log.v(LoaderManagerImpl.TAG, "  Resetting: " + this.mLoader);
338:                    Log.v(TAG, "  Created new loader " + info);
363:            Log.v(TAG, "initLoader in " + this + ": args=" + args);
369:            Log.v(TAG, "  Re-using existing loader " + info);
383:            Log.v(TAG, "restartLoader in " + this + ": args=" + args);
402:            Log.v(TAG, "destroyLoader in " + this + " of " + id);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/loader/content/ModernAsyncTask.java
108:                    Log.w(ModernAsyncTask.LOG_TAG, e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/localbroadcastmanager/content/LocalBroadcastManager.java
160:                Log.v(TAG, "Resolving type " + type2 + " scheme " + scheme + " of intent " + intent);
165:                    Log.v(TAG, "Action list: " + entries);
172:                        Log.v(TAG, "Matching against filter " + receiver.filter);
180:                            Log.v(TAG, "  Filter's target already added");
193:                                Log.v(TAG, "  Filter matched!  match=0x" + Integer.toHexString(match));
222:                            Log.v(TAG, "  Filter did not match: " + reason);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/print/PrintHelper.java
403:                    Log.e(PrintHelper.LOG_TAG, "Error writing printed content", throwable);
475:                    Log.w(LOG_TAG, "close fail ", t);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/profileinstaller/ProfileInstaller.java
59:            Log.d(TAG, msg);
101:                    Log.e(TAG, msg, (Throwable) data);
104:                    Log.d(TAG, msg);
243:                Log.d(TAG, "Installing profile for " + context.getPackageName());
247:                Log.d(TAG, "Skipping profile installation for " + context.getPackageName());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/AsyncListUtil.java
33:        Log.d(TAG, "[MAIN] " + String.format(s, args));
60:                    Log.e(AsyncListUtil.TAG, "duplicate tile @" + duplicate.mStartPosition);
83:                    Log.e(AsyncListUtil.TAG, "tile not found @" + position);
217:                Log.d(AsyncListUtil.TAG, "[BKGR] " + String.format(s, args));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/DividerItemDecoration.java
28:            Log.w(TAG, "@android:attr/listDivider was not set in the theme used for this DividerItemDecoration. Please set that attribute all call setDrawable()");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/GridLayoutManager.java
370:            Log.w(TAG, "Cannot find span size for pre layout position. " + viewPosition);
386:            Log.w(TAG, "Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:" + pos);
402:            Log.w(TAG, "Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:" + pos);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/ItemTouchHelper.java
745:            Log.e(TAG, "Start drag has been called but dragging is not enabled");
749:            Log.e(TAG, "Start drag has been called with a view holder which is not a child of the RecyclerView which is controlled by this ItemTouchHelper.");
760:            Log.e(TAG, "Start swipe has been called but swiping is not enabled");
764:            Log.e(TAG, "Start swipe has been called with a view holder which is not a child of the RecyclerView controlled by this ItemTouchHelper.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/LinearLayoutManager.java
1282:        Log.d(TAG, "internal representation of views on the screen");
1285:            Log.d(TAG, "item " + getPosition(child) + ", coord:" + this.mOrientationHelper.getDecoratedStart(child));
1287:        Log.d(TAG, "==============");
1291:        Log.d(TAG, "validating child count " + getChildCount());
1446:            Log.d(TAG, "avail:" + this.mAvailable + ", ind:" + this.mCurrentPosition + ", dir:" + this.mItemDirection + ", offset:" + this.mOffset + ", layoutDir:" + this.mLayoutDirection);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/MessageThreadUtil.java
41:                            Log.e("ThreadUtil", "Unsupported message, what=" + msg.what);
114:                                Log.e("ThreadUtil", "Unsupported message, what=" + msg.what);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/RecyclerView.java
652:                Log.w(TAG, "setScrollingTouchSlop(): bad argument constant " + slopConstant + "; using default value");
989:            Log.e(TAG, "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
1011:            Log.e(TAG, "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
1019:        Log.w(TAG, "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead");
1026:            Log.e(TAG, "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
1264:            Log.e(TAG, "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
1299:            Log.e(TAG, "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.");
1788:            Log.w(TAG, "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", new IllegalStateException("" + exceptionLabel()));
1910:                    Log.e(TAG, "Error processing scroll; pointer index for id " + this.mScrollPointerId + " not found. Did any MotionEvents get skipped?");
2021:                    Log.e(TAG, "Error processing scroll; pointer index for id " + this.mScrollPointerId + " not found. Did any MotionEvents get skipped?");
2393:            Log.e(TAG, "No adapter attached; skipping layout");
2397:            Log.e(TAG, "No layout manager attached; skipping layout");
2683:        Log.e(TAG, "Problem while matching changed view holders with the newones. The pre-layout information for the change holder " + oldChangeViewHolder + " cannot be found but it is necessary for " + holder + exceptionLabel());
4977:            Log.e(RecyclerView.TAG, "You must override onLayoutChildren(Recycler recycler, State state) ");
5021:            Log.e(RecyclerView.TAG, "You must override smoothScrollToPosition to support smooth scrolling");
6316:                Log.e("View", "isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for " + this);
6574:                Log.w(RecyclerView.TAG, "An instance of " + getClass().getSimpleName() + " was started more than once. Each instance of" + getClass().getSimpleName() + " is intended to only be used once. You should create a new instance for each use.");
6599:            Log.w(RecyclerView.TAG, "You should override computeScrollVectorForPosition when the LayoutManager does not implement " + ScrollVectorProvider.class.getCanonicalName());
6652:                    Log.e(RecyclerView.TAG, "Passed over target position while smooth scrolling.");
6748:                        Log.e(RecyclerView.TAG, "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/startup/StartupLogger.java
15:        Log.i(TAG, message);
20:        Log.w(TAG, message);
25:        Log.e(TAG, message, throwable);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/tracing/Trace.java
123:        Log.v(TAG, "Unable to call " + methodName + " via reflection", exception);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/transition/GhostViewPlatform.java
66:                Log.i(TAG, "Failed to retrieve GhostView class", e);
80:                Log.i(TAG, "Failed to retrieve addGhost method", e);
94:                Log.i(TAG, "Failed to retrieve removeGhost method", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/transition/ViewGroupUtilsApi14.java
55:                Log.i(TAG, "Failed to access mLayoutSuppressed field by reflection");
68:                Log.i(TAG, "Failed to get mLayoutSuppressed field by reflection");
88:                Log.i(TAG, "Failed to access cancel method by reflection");
97:                Log.i(TAG, "Failed to access cancel method by reflection");
99:                Log.i(TAG, "Failed to invoke cancel method by reflection");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/transition/ViewUtilsBase.java
134:                Log.i(TAG, "fetchViewFlagsField: ");
155:                Log.i(TAG, "Failed to retrieve setFrame method", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/vectordrawable/graphics/drawable/AnimatorInflaterCompat.java
451:        Log.d(TAG, header);
460:            Log.d(TAG, append.append(obj).toString());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/vectordrawable/graphics/drawable/VectorDrawableCompat.java
556:        Log.v(LOGTAG, indent + "current group is :" + currentGroup.getGroupName() + " rotation is " + currentGroup.mRotate);
557:        Log.v(LOGTAG, indent + "matrix is :" + currentGroup.getLocalMatrix().toString());
1276:            Log.v(VectorDrawableCompat.LOGTAG, indent + "current path is :" + this.mPathName + " pathData is " + nodesToString(this.mNodes));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/viewpager/widget/ViewPager.java
540:            Log.w(TAG, "Requested offscreen page limit " + limit + " too small; defaulting to 1");
2197:                Log.e(TAG, "arrowScroll tried to find focus based on non-child current focused view " + sb.toString());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/example/mastg_test0039/MainActivity.java
39:                    Log.d("result func:", "" + result);
138:                    Log.d("Credentials", "" + data);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/animation/MotionSpec.java
99:            Log.w(TAG, "Can't load animation resource ID #0x" + Integer.toHexString(id), e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/badge/BadgeDrawable.java
351:            Log.w(TAG, "Bottom badge gravities are deprecated; please use a top gravity instead.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/badge/BadgeUtils.java
109:        Log.w(LOG_TAG, "Trying to remove badge from a null menuItemView: " + menuItemId);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/bottomsheet/BottomSheetBehavior.java
1022:        Log.w(TAG, "BottomSheetBehavior now supports multiple callbacks. `setBottomSheetCallback()` removes all existing callbacks, including ones set internally by library authors, which may result in unintended behavior. This may change in the future. Please use `addBottomSheetCallback()` and `removeBottomSheetCallback()` instead to set your own callbacks.");
1045:            Log.w(TAG, "Cannot set state: " + state);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/button/MaterialButton.java
306:                Log.w(LOG_TAG, "MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/button/MaterialButtonToggleGroup.java
139:            Log.e(LOG_TAG, "Child views must be of type MaterialButton.");
413:            Log.e(LOG_TAG, "Button ID is not valid: " + buttonId);
479:            Log.w(LOG_TAG, "Child order wasn't updated");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/card/MaterialCardView.java
276:                Log.i(LOG_TAG, "Setting a custom background is not supported.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/carousel/CarouselLayoutManager.java
274:            Log.d(TAG, "internal representation of views on the screen");
278:                Log.d(TAG, "item position " + getPosition(child) + ", center:" + center + ", child index:" + i);
280:            Log.d(TAG, "==============");
790:                Log.d(TAG, "Unknown focus request:" + focusDirection);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/chip/Chip.java
256:            Log.w(TAG, "Do not set the background; Chip manages its own background drawable.");
274:            Log.w(TAG, "Chip text must be vertically center and start aligned");
363:            Log.w(TAG, "Chip text must be vertically center and start aligned");
371:        Log.w(TAG, "Do not set the background tint list; Chip manages its own background drawable.");
376:        Log.w(TAG, "Do not set the background tint mode; Chip manages its own background drawable.");
381:        Log.w(TAG, "Do not set the background color; Chip manages its own background drawable.");
386:        Log.w(TAG, "Do not set the background resource; Chip manages its own background drawable.");
392:            Log.w(TAG, "Do not set the background; Chip manages its own background drawable.");
401:            Log.w(TAG, "Do not set the background drawable; Chip manages its own background drawable.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/color/ColorResourcesLoaderCreator.java
25:            Log.i(TAG, "Table created, length: " + contentBytes.length);
33:                    Log.w(TAG, "Cannot create memory file descriptor.");
61:            Log.e(TAG, "Failed to create the ColorResourcesTableCreator.", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/floatingactionbutton/FloatingActionButton.java
238:        Log.i(LOG_TAG, "Setting a custom background is not supported.");
243:        Log.i(LOG_TAG, "Setting a custom background is not supported.");
248:        Log.i(LOG_TAG, "Setting a custom background is not supported.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/internal/CollapsingTextHelper.java
851:            Log.e(TAG, e.getCause().getMessage(), e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/internal/WindowUtils.java
79:                Log.w(WindowUtils.TAG, e);
81:                Log.w(WindowUtils.TAG, e2);
83:                Log.w(WindowUtils.TAG, e3);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/motion/MaterialBackAnimationHelper.java
46:            Log.w(TAG, "Must call startBackProgress() before updateBackProgress()");
62:            Log.w(TAG, "Must call startBackProgress() and updateBackProgress() before cancelBackProgress()");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/navigation/NavigationBarItemView.java
669:            Log.w("NavigationBar", "Multiple badges shouldn't be attached to one item.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/resources/TextAppearance.java
74:                Log.d(TAG, "Error loading font " + this.fontFamily, e2);
118:            Log.d(TAG, "Error loading font " + this.fontFamily, e2);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/shape/MaterialShapeDrawable.java
665:            Log.w(TAG, "Compatibility shadow requested but can't be drawn for all operations in this shape.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/slider/BaseSlider.java
378:            Log.w(TAG, String.format(WARNING_FLOATING_POINT_ERROR, "stepSize", Float.valueOf(f)));
382:            Log.w(TAG, String.format(WARNING_FLOATING_POINT_ERROR, "valueFrom", Float.valueOf(f2)));
386:            Log.w(TAG, String.format(WARNING_FLOATING_POINT_ERROR, "valueTo", Float.valueOf(f3)));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/snackbar/BaseTransientBottomBar.java
177:                        Log.w(BaseTransientBottomBar.TAG, "Unable to apply gesture inset because layout params are not MarginLayoutParams");
264:            Log.w(TAG, "Unable to update margins because layout params are not MarginLayoutParams");
268:            Log.w(TAG, "Unable to update margins because original view margins are not set");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/tabs/TabLayout.java
1043:                    Log.w(LOG_TAG, "GRAVITY_START is not supported with the current tab mode, GRAVITY_CENTER will be used instead");
1054:                Log.w(LOG_TAG, "MODE_SCROLLABLE + GRAVITY_FILL is not supported, GRAVITY_START will be used instead");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/textfield/TextInputLayout.java
674:            Log.i(LOG_TAG, "EditText added is not a TextInputEditText. Please switch to using that class instead.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/transition/MaterialContainerTransform.java
473:            Log.w(TAG, "Skipping due to null end bounds. Ensure end view is laid out and measured.");
476:        Log.w(TAG, "Skipping due to null start bounds. Ensure start view is laid out and measured.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/transition/platform/MaterialContainerTransform.java
473:            Log.w(TAG, "Skipping due to null end bounds. Ensure end view is laid out and measured.");
476:        Log.w(TAG, "Skipping due to null start bounds. Ensure start view is laid out and measured.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/io/ConsoleKt.java
14:        System.out.print(message);
18:        System.out.print(message);
22:        System.out.print(message);
26:        System.out.print(Byte.valueOf(message));
30:        System.out.print(Short.valueOf(message));
34:        System.out.print(message);
38:        System.out.print(message);
42:        System.out.print(message);
46:        System.out.print(message);
51:        System.out.print(message);
55:        System.out.println(message);
59:        System.out.println(message);
63:        System.out.println(message);
67:        System.out.println(Byte.valueOf(message));
71:        System.out.println(Short.valueOf(message));
75:        System.out.println(message);
79:        System.out.println(message);
83:        System.out.println(message);
87:        System.out.println(message);
92:        System.out.println(message);
96:        System.out.println();

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlinx/coroutines/debug/AgentPremain.java
86:            System.out.println((Object) "Cannot perform coroutines dump, debug probes are disabled");

[+] Total file sources are: 183 & its total instances are: 676 

[!] QuickNote:
    - It is recommended that any sensitive data should not be part of the log's output or revealed into Stacktraces, if observed.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-3 | CWE-532: Insertion of Sensitive Information into Log File
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>> The Push Notification instances...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/NotificationCompat.java
235:            setContentTitle(NotificationCompat.getContentTitle(notification)).setContentText(NotificationCompat.getContentText(notification)).setContentInfo(NotificationCompat.getContentInfo(notification)).setSubText(NotificationCompat.getSubText(notification)).setSettingsText(NotificationCompat.getSettingsText(notification)).setStyle(style).setContentIntent(notification.contentIntent).setGroup(NotificationCompat.getGroup(notification)).setGroupSummary(NotificationCompat.isGroupSummary(notification)).setLocusId(NotificationCompat.getLocusId(notification)).setWhen(notification.when).setShowWhen(NotificationCompat.getShowWhen(notification)).setUsesChronometer(NotificationCompat.getUsesChronometer(notification)).setAutoCancel(NotificationCompat.getAutoCancel(notification)).setOnlyAlertOnce(NotificationCompat.getOnlyAlertOnce(notification)).setOngoing(NotificationCompat.getOngoing(notification)).setLocalOnly(NotificationCompat.getLocalOnly(notification)).setLargeIcon(notification.largeIcon).setBadgeIconType(NotificationCompat.getBadgeIconType(notification)).setCategory(NotificationCompat.getCategory(notification)).setBubbleMetadata(NotificationCompat.getBubbleMetadata(notification)).setNumber(notification.number).setTicker(notification.tickerText).setContentIntent(notification.contentIntent).setDeleteIntent(notification.deleteIntent).setFullScreenIntent(notification.fullScreenIntent, NotificationCompat.getHighPriority(notification)).setSound(notification.sound, notification.audioStreamType).setVibrate(notification.vibrate).setLights(notification.ledARGB, notification.ledOnMS, notification.ledOffMS).setDefaults(notification.defaults).setPriority(notification.priority).setColor(NotificationCompat.getColor(notification)).setVisibility(NotificationCompat.getVisibility(notification)).setPublicVersion(NotificationCompat.getPublicVersion(notification)).setSortKey(NotificationCompat.getSortKey(notification)).setTimeoutAfter(NotificationCompat.getTimeoutAfter(notification)).setShortcutId(NotificationCompat.getShortcutId(notification)).setProgress(extras.getInt(NotificationCompat.EXTRA_PROGRESS_MAX), extras.getInt(NotificationCompat.EXTRA_PROGRESS), extras.getBoolean(NotificationCompat.EXTRA_PROGRESS_INDETERMINATE)).setAllowSystemGeneratedContextualActions(NotificationCompat.getAllowSystemGeneratedContextualActions(notification)).setSmallIcon(notification.icon, notification.iconLevel).addExtras(getExtrasWithoutDuplicateData(notification, style));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/NotificationCompatBuilder.java
35:        builder.setWhen(n.when).setSmallIcon(n.icon, n.iconLevel).setContent(n.contentView).setTicker(n.tickerText, b.mTickerView).setVibrate(n.vibrate).setLights(n.ledARGB, n.ledOnMS, n.ledOffMS).setOngoing((n.flags & 2) != 0).setOnlyAlertOnce((n.flags & 8) != 0).setAutoCancel((n.flags & 16) != 0).setDefaults(n.defaults).setContentTitle(b.mContentTitle).setContentText(b.mContentText).setContentInfo(b.mContentInfo).setContentIntent(b.mContentIntent).setDeleteIntent(n.deleteIntent).setFullScreenIntent(b.mFullScreenIntent, (n.flags & 128) != 0).setLargeIcon(b.mLargeIcon).setNumber(b.mNumber).setProgress(b.mProgressMax, b.mProgress, b.mProgressIndeterminate);

[!] QuickNote:
    - It is recommended that any sensitive data should not be notified via the push notifications, if observed. Please note that, It would be necessary to understand how the application is generating the notifications and which data ends up being shown.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-4 | CWE-829: Inclusion of Functionality from Untrusted Control Sphere
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>> The Keyboard Cache instances...


==>>  The Sensitive Data Disclosure through the User Interface...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/resources/res/layout/activity_main.xml
26:        android:inputType="textPassword"

[!] QuickNote:
    - It seems that the application has implemented inputType="textPassword" attribute to hide the certain information, if observed. Make sure that the application is not disclosing any sensitive data such as password, card details, etc. in the clear-text format via User Interface.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-7 | CWE-359: Exposure of Private Personal Information to an Unauthorized Actor
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>>  The allowBackup flag configuration...

    - android:allowBackup="true" flag has not been observed in the AndroidManifest.xml file.

==>> The Auto-Generated Screenshots protection...

[!] QuickNote:
    - It is recommended to set the FLAG_SECURE option to protect from Auto-Generated Screenshots issue. Please note that, When the application goes into background, a screenshot of the current activity is taken which may leak sensitive information.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-9 | CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>> The flush instances utilized for clearing the Memory...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/versionedparcelable/VersionedParcelStream.java
550:            this.mDataStream.flush();

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/ExceptionsKt__ExceptionsKt.java
51:        pw.flush();

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/io/encoding/EncodeOutputStream.java
85:        this.output.flush();

[!] QuickNote:
    - It is recommended that the sensitive data should be flushed appropriately after its usage. Please note that, all the sensitive data should be removed from memory as soon as possible.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-10 | CWE-316: Cleartext Storage of Sensitive Information in Memory
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>> The Clipboard Copying instances...


==>> The possible Hard-coded Information...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentStatePagerAdapter.java
164:                String key = "f" + i;

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/example/mastg_test0039/MainActivity.java
169:        String username = "user_" + randomNumber;

[!] QuickNote:
    - It is recommended that the hard-coded sensitive data (such as Private IPs/E-mails, User/DB details, etc.) should not be stored unless secured specifically, if observed. Please note that, an attacker can use that data for further malicious intentions.

[*] Reference:
    - OWASP MASVS: MSTG-STORAGE-14 | CWE-312: Cleartext Storage of Sensitive Information
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x07-v2-data_storage_and_privacy_requirements

==>> The potential Hard-coded Keys/Tokens/Secrets...



[+] Hunting begins based on "V3: Cryptography Requirements"
[+] -------------------------------------------------------

==>> The Symmetric Cryptography implementation...


==>> The Insecure/Deprecated Cryptographic Algorithms...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/pm/PackageInfoCompat.java
58:            return MessageDigest.getInstance("SHA256").digest(bytes);

[!] QuickNote:
    - It is recommended that cryptographic algorithms used in the application are up to date and in-line with industry standards. Please note that, Vulnerable algorithms include outdated block ciphers (such as DES, DESede, and 3DES), stream ciphers (such as RC4), hash functions (such as MD5 and SHA1), and broken random number generators (such as Dual_EC_DRBG and SHA1PRNG).

[*] Reference:
    - OWASP MASVS: MSTG-CRYPTO-4 | CWE-327: Use of a Broken or Risky Cryptographic Algorithm
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements

==>> The Insecure/Weak Cipher Modes...


==>> The Static IVs...


==>> The Weak Random functions...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/profileinstaller/ProfileInstallerInitializer.java
44:        Random random = new Random();

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/example/mastg_test0039/MainActivity.java
167:        Random random = new Random();
176:        Random random = new Random();

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/color/utilities/QuantizerWsmeans.java
38:        Random random = new Random(272008L);

[!] QuickNote:
    - It is recommended to use Pseudo-random number generators along-with 256-bit seed for producing a random-enough number, if observed. Please note that, Under certain conditions this weakness may expose mobile application data encryption or other protection based on randomization.

[*] Reference:
    - OWASP MASVS: MSTG-CRYPTO-6 | CWE-330: Use of Insufficiently Random Values
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements


[+] Hunting begins based on "V4: Authentication and Session Management Requirements"
[+] --------------------------------------------------------------------------------

==>> The cookie related instances...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/hardware/fingerprint/FingerprintManagerCompat.java
4:import android.hardware.fingerprint.FingerprintManager;
13:public class FingerprintManagerCompat {
16:    public static FingerprintManagerCompat from(Context context) {
17:        return new FingerprintManagerCompat(context);
20:    private FingerprintManagerCompat(Context context) {
25:        FingerprintManager fp = getFingerprintManagerOrNull(this.mContext);
30:        FingerprintManager fp = getFingerprintManagerOrNull(this.mContext);
36:        FingerprintManager fp = getFingerprintManagerOrNull(this.mContext);
47:    private static FingerprintManager getFingerprintManagerOrNull(Context context) {
48:        return Api23Impl.getFingerprintManagerOrNull(context);
51:    private static FingerprintManager.CryptoObject wrapCryptoObject(CryptoObject cryptoObject) {
55:    static CryptoObject unwrapCryptoObject(FingerprintManager.CryptoObject cryptoObject) {
59:    private static FingerprintManager.AuthenticationCallback wrapCallback(final AuthenticationCallback callback) {
60:        return new FingerprintManager.AuthenticationCallback() { // from class: androidx.core.hardware.fingerprint.FingerprintManagerCompat.1
61:            @Override // android.hardware.fingerprint.FingerprintManager.AuthenticationCallback
66:            @Override // android.hardware.fingerprint.FingerprintManager.AuthenticationCallback
71:            @Override // android.hardware.fingerprint.FingerprintManager.AuthenticationCallback
72:            public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
73:                AuthenticationCallback.this.onAuthenticationSucceeded(new AuthenticationResult(FingerprintManagerCompat.unwrapCryptoObject(Api23Impl.getCryptoObject(result))));
76:            @Override // android.hardware.fingerprint.FingerprintManager.AuthenticationCallback
155:            return ((FingerprintManager) fingerprintManager).hasEnrolledFingerprints();
159:            return ((FingerprintManager) fingerprintManager).isHardwareDetected();
163:            ((FingerprintManager) fingerprintManager).authenticate((FingerprintManager.CryptoObject) crypto, cancel, flags, (FingerprintManager.AuthenticationCallback) callback, handler);
166:        static FingerprintManager.CryptoObject getCryptoObject(Object authenticationResult) {
167:            return ((FingerprintManager.AuthenticationResult) authenticationResult).getCryptoObject();
170:        public static FingerprintManager getFingerprintManagerOrNull(Context context) {
172:                return (FingerprintManager) context.getSystemService(FingerprintManager.class);
177:        public static FingerprintManager.CryptoObject wrapCryptoObject(CryptoObject cryptoObject) {
182:                return new FingerprintManager.CryptoObject(cryptoObject.getCipher());
185:                return new FingerprintManager.CryptoObject(cryptoObject.getSignature());
190:            return new FingerprintManager.CryptoObject(cryptoObject.getMac());
194:            FingerprintManager.CryptoObject cryptoObject = (FingerprintManager.CryptoObject) cryptoObjectObj;

[!] QuickNote:
    - It is recommended to use Biometric Authentication mechanism along-with CryptoObject appropriately, if observed. Please note that, If CryptoObject is not used as part of the authenticate method or used in an incorrect way, it can be bypassed by using tools such as Frida. Further, please be informed that the FingerprintManager class is deprecated in Android 9 (API level 28) and the Biometric library should be used instead as a best practice.

[*] Reference:
    - OWASP MASVS: MSTG-AUTH-8 | CWE-287: Improper Authentication
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements
[~] NOTE:
    - The test scenarios related to the different authentication mechanisms, stateful/stateless session management, user activities, strong password policies, etc. should be covered during your dynamic analysis/API testing phase.


[+] Hunting begins based on "V5: Network Communication Requirements"
[+] ----------------------------------------------------------------

==>> The presence of the Network Security Configuration file...

[!] QuickNote:
    - It is recommended to configure the Network Security Configuration file (such as network_security_config.xml) as it does not exist. Please note that, Network Security Config file can be used to protect against cleartext traffic, set up trusted certificate authorities, implement certificate pinning, etc. in terms of network security settings.

[*] Reference:
    - OWASP MASVS: MSTG-NETWORK-1 | CWE-693: Protection Mechanism Failure
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements

==>> The Possible MITM attack...


==>> The Weak SSL/TLS protocols...


==>>  The app is allowing cleartext traffic...


==>> The Server Certificate verification...


==>> The WebView Server Certificate verification...


==>> The Hostname Verification...


==>> The Hard-coded Certificates/Key/Keystore files...


==>> The Certificate Pinning settings...


==>> The Certificate Pinning implementation...


==>> The custom Trust Anchors...


==>> The Security Provider implementation...

[!] QuickNote:
    - It is recommended that applications based on the Android SDK should depend on GooglePlayServices, if not observed. Please note that, The ProviderInstaller class is called with either installIfNeeded or installIfNeededAsync to prevent SSL exploits.

[*] Reference:
    - OWASP MASVS: MSTG-NETWORK-6 | CWE-693: Protection Mechanism Failure
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements


[+] Hunting begins based on "V6: Platform Interaction Requirements"
[+] ---------------------------------------------------------------

==>> The Permissions...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/resources/AndroidManifest.xml
13:    <uses-permission android:name="android.permission.INTERNET"/>
14:    <permission
17:    <uses-permission android:name="com.example.mastg_test0039.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION"/>

[!] QuickNote:
    - It is recommended that the appropriate protectionLevel should be configured in the Permission declaration, if observed. Please note that, Dangerous permissions involve the user’s privacy.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-1 | CWE-276: Incorrect Default Permissions
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The Deprecated/Unsupprotive Permissions...


==>> The Custom Permissions...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/activity/result/contract/ActivityResultContracts.java
139:                    String permission = ContextCompat.checkSelfPermission(context, input[i]) == 0 ? 1 : null;
231:            boolean granted = ContextCompat.checkSelfPermission(context, input) == 0;

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/app/TwilightManager.java
58:        int permission = PermissionChecker.checkSelfPermission(this.mContext, "android.permission.ACCESS_COARSE_LOCATION");
62:        int permission2 = PermissionChecker.checkSelfPermission(this.mContext, "android.permission.ACCESS_FINE_LOCATION");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/ContextCompat.java
143:    public static int checkSelfPermission(Context context, String permission) {
223:        if (PermissionChecker.checkSelfPermission(obj, permission) != 0) {

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/PermissionChecker.java
55:    public static int checkSelfPermission(Context context, String permission) {
66:    public static int checkCallingOrSelfPermission(Context context, String permission) {

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/widget/TextViewCompat.java
252:                return info.activityInfo.permission == null || context.checkSelfPermission(info.activityInfo.permission) == 0;

[!] QuickNote:
    - It is recommended that Custom Permissions should be used appropriately, if observed. Please note that, The permissions provided programmatically are enforced in the manifest file, as those are more error-prone and can be bypassed more easily with, e.g., runtime instrumentation.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-1 | CWE-276: Incorrect Default Permissions
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The Exported service/activity/provider/receiver without permission set...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/resources/AndroidManifest.xml


==>> The potential SQL Injection instances...


==>> The potential Cross-Site Scripting flaws...


==>> The potential Code Execution flaws...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlinx/coroutines/internal/SystemPropsKt__SystemPropsKt.java
10:    private static final int AVAILABLE_PROCESSORS = Runtime.getRuntime().availableProcessors();

[!] QuickNote:
    - It is recommended not to execute the commands directly on the Operating System or to never use calls to native commands, if observed.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The Fragment Injection instances...


==>> The EnableSafeBrowsing setting...


==>> The instances of URL Loading in WebViews...


==>> The Custom URL Schemes...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/resources/AndroidManifest.xml
37:            <intent-filter>
38:                <action android:name="android.intent.action.MAIN"/>
62:            <intent-filter>
63:                <action android:name="androidx.profileinstaller.action.INSTALL_PROFILE"/>
65:            <intent-filter>
66:                <action android:name="androidx.profileinstaller.action.SKIP_FILE"/>
68:            <intent-filter>
69:                <action android:name="androidx.profileinstaller.action.SAVE_PROFILE"/>
71:            <intent-filter>
72:                <action android:name="androidx.profileinstaller.action.BENCHMARK_OPERATION"/>

[!] QuickNote:
    - It is recommended that custom URL schemes should be configured with android:autoVerify=true, if observed.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-3 | CWE-927: Use of Implicit Intent for Sensitive Communication
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The Implicit intents used for broadcast...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/localbroadcastmanager/content/LocalBroadcastManager.java
147:    public boolean sendBroadcast(Intent intent) {
246:        if (sendBroadcast(intent)) {

[!] QuickNote:
    - It is recommended to not send the broadcast using an implicit intent, if observed. Use methods such as sendBroadcast, sendOrderedBroadcast, sendStickyBroadcast, etc. appropriately. Please note that, an attacker can intercept or hijack the sensitive data among components. Always use explicit intents for broadcast components or LocalBroadcastManager and use an appropriate permission.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-4 | CWE-927: Use of Implicit Intent for Sensitive Communication
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The Implicit intents used for activity...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/activity/ComponentActivity.java
191:                                    dispatchResult(requestCode, 0, new Intent().setAction(ActivityResultContracts.StartIntentSenderForResult.ACTION_INTENT_SENDER_REQUEST).putExtra(ActivityResultContracts.StartIntentSenderForResult.EXTRA_SEND_INTENT_EXCEPTION, e));
202:                ActivityCompat.startActivityForResult(activity, intent, requestCode, optionsBundle);
550:    public void startActivityForResult(Intent intent, int requestCode) {
551:        super.startActivityForResult(intent, requestCode);
556:    public void startActivityForResult(Intent intent, int requestCode, Bundle options) {
557:        super.startActivityForResult(intent, requestCode, options);
584:        if (!this.mActivityResultRegistry.dispatchResult(requestCode, -1, new Intent().putExtra(ActivityResultContracts.RequestMultiplePermissions.EXTRA_PERMISSIONS, permissions).putExtra(ActivityResultContracts.RequestMultiplePermissions.EXTRA_PERMISSION_GRANT_RESULTS, grantResults))) {

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/view/menu/ActionMenuItem.java
267:            this.mContext.startActivity(intent);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/view/menu/MenuItemImpl.java
99:                this.mMenu.getContext().startActivity(this.mIntent);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ActivityChooserView.java
361:                            launchIntent.addFlags(524288);
362:                            ActivityChooserView.this.getContext().startActivity(launchIntent);
391:                launchIntent.addFlags(524288);
392:                ActivityChooserView.this.getContext().startActivity(launchIntent);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/SearchView.java
306:        Intent intent = new Intent("android.speech.action.WEB_SEARCH");
308:        intent.addFlags(268435456);
309:        intent.putExtra("android.speech.extra.LANGUAGE_MODEL", "web_search");
310:        Intent intent2 = new Intent("android.speech.action.RECOGNIZE_SPEECH");
312:        intent2.addFlags(268435456);
837:                getContext().startActivity(webSearchIntent);
840:                getContext().startActivity(appSearchIntent);
1025:            getContext().startActivity(intent);
1038:        getContext().startActivity(intent);
1042:        Intent intent = new Intent(action);
1043:        intent.addFlags(268435456);
1045:            intent.setData(data);
1047:        intent.putExtra("user_query", this.mUserQuery);
1049:            intent.putExtra("query", query);
1052:            intent.putExtra("intent_extra_data_key", extraData);
1056:            intent.putExtra("app_data", bundle);
1059:            intent.putExtra("action_key", actionKey);
1060:            intent.putExtra("action_msg", actionMsg);
1067:        Intent voiceIntent = new Intent(baseIntent);
1069:        voiceIntent.putExtra("calling_package", searchActivity == null ? null : searchActivity.flattenToShortString());
1075:        Intent queryIntent = new Intent("android.intent.action.SEARCH");
1083:        Intent voiceIntent = new Intent(baseIntent);
1101:        voiceIntent.putExtra("android.speech.extra.LANGUAGE_MODEL", languageModel);
1102:        voiceIntent.putExtra("android.speech.extra.PROMPT", prompt);
1103:        voiceIntent.putExtra("android.speech.extra.LANGUAGE", language);
1104:        voiceIntent.putExtra("android.speech.extra.MAX_RESULTS", maxResults);
1105:        voiceIntent.putExtra("calling_package", searchActivity == null ? null : searchActivity.flattenToShortString());
1106:        voiceIntent.putExtra("android.speech.extra.RESULTS_PENDINGINTENT", pending);
1107:        voiceIntent.putExtra("android.speech.extra.RESULTS_PENDINGINTENT_BUNDLE", queryExtras);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/ShareActionProvider.java
119:                ShareActionProvider.this.mContext.startActivity(launchIntent);
154:        intent.addFlags(134742016);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/ActivityCompat.java
70:    public static void startActivityForResult(Activity activity, Intent intent, int requestCode, Bundle options) {
71:        Api16Impl.startActivityForResult(activity, intent, requestCode, options);
302:        static void startActivityForResult(Activity activity, Intent intent, int requestCode, Bundle options) {
303:            activity.startActivityForResult(intent, requestCode, options);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/ShareCompat.java
108:            Intent action = new Intent().setAction("android.intent.action.SEND");
110:            action.putExtra(ShareCompat.EXTRA_CALLING_PACKAGE, launchingContext.getPackageName());
111:            action.putExtra(ShareCompat.EXTRA_CALLING_PACKAGE_INTEROP, launchingContext.getPackageName());
112:            action.addFlags(524288);
127:                this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_ACTIVITY, componentName);
128:                this.mIntent.putExtra(ShareCompat.EXTRA_CALLING_ACTIVITY_INTEROP, componentName);
177:                r3.setAction(r4)
186:                r3.putExtra(r2, r1)
200:                r1.setAction(r3)
226:            this.mIntent.putExtra(extra, finalAddresses);
238:            intent.putExtra(extra, result);
246:            this.mContext.startActivity(createChooserIntent());
264:            this.mIntent.putExtra("android.intent.extra.TEXT", text);
269:            this.mIntent.putExtra(IntentCompat.EXTRA_HTML_TEXT, htmlText);
296:            this.mIntent.putExtra("android.intent.extra.EMAIL", addresses);
314:            this.mIntent.putExtra("android.intent.extra.CC", addresses);
332:            this.mIntent.putExtra("android.intent.extra.BCC", addresses);
350:            this.mIntent.putExtra("android.intent.extra.SUBJECT", subject);
550:            intent.addFlags(1);
555:            intent.setFlags(intent.getFlags() & (-2));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/TaskStackBuilder.java
123:        intents[0] = new Intent(intents[0]).addFlags(268484608);
125:            Intent topIntent = new Intent(intents[intents.length - 1]);
126:            topIntent.addFlags(268435456);
127:            this.mSourceContext.startActivity(topIntent);
140:        intents[0] = new Intent(intents[0]).addFlags(268484608);
149:        intents[0] = new Intent(this.mIntents.get(0)).addFlags(268484608);
151:            intents[i] = new Intent(this.mIntents.get(i));

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/ContextCompat.java
111:    public static void startActivity(Context context, Intent intent, Bundle options) {
112:        Api16Impl.startActivity(context, intent, options);
303:        static void startActivity(Context obj, Intent intent, Bundle options) {
304:            obj.startActivity(intent, options);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/Fragment.java
679:    public void startActivity(Intent intent) {
680:        startActivity(intent, null);
683:    public void startActivity(Intent intent, Bundle options) {
692:    public void startActivityForResult(Intent intent, int requestCode) {
693:        startActivityForResult(intent, requestCode, null);
697:    public void startActivityForResult(Intent intent, int requestCode, Bundle options) {

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentActivity.java
341:            ActivityCompat.startActivityForResult(this, intent, -1, options);
343:            fragment.startActivityForResult(intent, requestCode, options);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/FragmentHostCallback.java
66:        ContextCompat.startActivity(this.mContext, intent, options);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/example/mastg_test0039/MainActivity.java
44:                        Intent intent = new Intent(MainActivity.this, (Class<?>) Profile.class);
45:                        MainActivity.this.startActivity(intent);

[!] QuickNote:
    - It is recommended to not start the activity using an implicit intent, if observed. Please note that, an attacker can hijack the activity and sometimes it may lead to sensitive information disclosure. Always use explicit intents to start activities using the setComponent, setPackage, setClass or setClassName methods of the Intent class.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-4 | CWE-927: Use of Implicit Intent for Sensitive Communication
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The instances of JavaScript Execution in WebViews...


==>> The instances of Remote/Local URL load in WebViews...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/example/mastg_test0039/Profile.java
32:        web.loadUrl("https://example.com");

[!] QuickNote:
    - It is recommended to implement Remote/Local URL load in WebViews securely, if observed.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-6 | CWE-940: Improper Verification of Source of a Communication Channel
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The Hard-coded links...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/SuggestionsAdapter.java
347:            String drawableUri = "android.resource://" + this.mProviderContext.getPackageName() + "/" + resourceId;

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/pm/ShortcutXmlParser.java
98:        String value = parser.getAttributeValue("http://schemas.android.com/apk/res/android", attribute);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/res/TypedArrayUtils.java
14:    private static final String NAMESPACE = "http://schemas.android.com/apk/res/android";

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/text/util/LinkifyCompat.java
69:            gatherLinks(links, text, PatternsCompat.AUTOLINK_WEB_URL, new String[]{"http://", "https://", "rtsp://"}, Linkify.sUrlMatchFilter, null);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/util/PatternsCompat.java
21:    private static final String PROTOCOL = "(?i:http|https|rtsp)://";
41:        WEB_URL = Pattern.compile("(((?:(?i:http|https|rtsp)://(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?(?:" + compile2 + ")(?:" + PORT_NUMBER + ")?)(" + PATH_AND_QUERY + ")?" + WORD_BOUNDARY + ")");
48:        String str3 = "((?:\\b|$|^)(?:(?:(?i:http|https|rtsp)://(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)(?:" + str + ")?(?:" + PORT_NUMBER + ")?)(?:" + PATH_AND_QUERY + ")?" + WORD_BOUNDARY + ")";

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/example/mastg_test0039/Profile.java
32:        web.loadUrl("https://example.com");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/chip/Chip.java
55:    private static final String NAMESPACE_ANDROID = "http://schemas.android.com/apk/res/android";

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/chip/ChipDrawable.java
50:    private static final String NAMESPACE_APP = "http://schemas.android.com/apk/res-auto";

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/search/SearchBar.java
44:    private static final String NAMESPACE_APP = "http://schemas.android.com/apk/res-auto";

[+] Total file sources are: 9 & its total instances are: 11 

[!] QuickNote:
    - It is recommended that external/hard-coded links have been used wisely across the application, if observed.

[*] Reference:
    - OWASP MASVS: MSTG-PLATFORM-6 | CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The instances of Resource Access permissions...


==>> The Remote WebView Debugging setting...


==>> The instances of Java Objects exposure through WebViews...


==>> The Object Persistence/Serialization instances...


==>> The WebViews Cleanup implementation...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/io/FilesKt__UtilsKt.java
281:                            stillExists = !FilesKt.deleteRecursively(dstFile);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/io/path/PathsKt__PathRecursiveFunctionsKt.java
113:                            PathsKt.deleteRecursively(dst);

[!] QuickNote:
    - It seems that the application clears the data via some mechanism, if observed. Please note that, the application should clear all the WebView resources including any files stored locally, the RAM cache, and any loaded JavaScript when it accesses any sensitive data within a WebView.

[*] Reference:
    - OWASP MASVS V6: MSTG-PLATFORM-10 | CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment

==>> The Application Update mechanism...

[!] QuickNote:
    - It is recommended that applications should be forced to be updated. If a security update comes in, then AppUpdateType.IMMEDIATE flag should be used in order to make sure that the user cannot go forward with using the app without updating it. Please note that, newer versions of an application will not fix security issues that are living in the backends to which the app communicates.

[*] Reference:
    - OWASP MASVS V1: MSTG-ARCH-9 | CWE-1277: Firmware Not Updateable
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x06-v1-architecture_design_and_threat_modelling_requireme

==>> The potential third-party application installation mechanism...



[+] Hunting begins based on "V7: Code Quality and Build Setting Requirements"
[+] -------------------------------------------------------------------------

==>> The debuggable flag configuration...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/resources/AndroidManifest.xml
    - android:debuggable="true"

[!] QuickNote:
    - It is recommended not to enable the debuggable flag, if observed. Please note that, the enabled setting allows attackers to obtain access to sensitive information, control the application flow, etc.

[*] Reference:
    - OWASP MASVS V7: MSTG-CODE-2 | CWE-215: Insertion of Sensitive Information Into Debugging Code
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements

==>> The StrictMode Policy instances...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatUtil.java
122:                        StrictMode.setThreadPolicy(old);
130:                StrictMode.setThreadPolicy(old);
135:            StrictMode.setThreadPolicy(old);

[!] QuickNote:
    - It is recommended that StrictMode should not be enabled in a production application, if observed. Please note that, It is designed for pre-production use only.

[*] Reference:
    - OWASP MASVS V7: MSTG-CODE-4 | CWE-749: Exposed Dangerous Method or Function
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements

==>> The Exception Handling instances...

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/appcompat/widget/LinearLayoutCompat.java
255:            throw new RuntimeException("mBaselineAlignedChildIndex of LinearLayout set to an index that is out of bounds.");
263:            throw new RuntimeException("mBaselineAlignedChildIndex of LinearLayout points to a View that doesn't know how to get its baseline.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/collection/CircularArray.java
17:            throw new RuntimeException("Max array capacity exceeded");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/collection/CircularIntArray.java
17:            throw new RuntimeException("Max array capacity exceeded");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/CustomAttribute.java
75:                throw new RuntimeException("Cannot interpolate String");
78:                throw new RuntimeException("Color does not have a single color to interpolate");
96:                throw new RuntimeException("Color does not have a single color to interpolate");
136:                throw new RuntimeException("Color does not have a single color to interpolate");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/CustomVariable.java
164:                throw new RuntimeException("Color does not have a single color to interpolate");
166:                throw new RuntimeException("Cannot interpolate String");
199:                throw new RuntimeException("Cannot interpolate String");
233:                throw new RuntimeException("Cannot interpolate String");
395:                throw new RuntimeException("unable to interpolate " + this.mName);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/SplineSet.java
195:            throw new RuntimeException("don't call for custom attribute call setPoint(pos, ConstraintAttribute)");
261:            throw new RuntimeException("don't call for custom attribute call setPoint(pos, ConstraintAttribute)");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/core/motion/utils/TimeCycleSplineSet.java
125:            throw new RuntimeException("don't call for custom attribute call setPoint(pos, ConstraintAttribute,...)");
299:            throw new RuntimeException("don't call for custom attribute call setPoint(pos, ConstraintAttribute,...)");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/utils/CustomSupport.java
51:                    throw new RuntimeException("unable to interpolate strings " + att.getName());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/utils/ViewSpline.java
362:            throw new RuntimeException("don't call for custom attribute call setPoint(pos, ConstraintAttribute)");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/utils/ViewTimeCycle.java
384:            throw new RuntimeException("don't call for custom attribute call setPoint(pos, ConstraintAttribute,...)");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/motion/widget/TransitionBuilder.java
12:            throw new RuntimeException("Invalid motion layout. Layout missing Motion Scene.");
16:            throw new RuntimeException("MotionLayout doesn't have the right motion scene.");
19:            throw new RuntimeException("Invalid motion layout. Motion Scene doesn't have any transition.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintAttribute.java
117:                throw new RuntimeException("Cannot interpolate String");
120:                throw new RuntimeException("Color does not have a single color to interpolate");
138:                throw new RuntimeException("Color does not have a single color to interpolate");
178:                throw new RuntimeException("Color does not have a single color to interpolate");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintProperties.java
633:        throw new RuntimeException("Only children of ConstraintLayout.LayoutParams supported");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/constraintlayout/widget/ConstraintSet.java
422:                throw new RuntimeException("All children of ConstraintLayout must have ids to use ConstraintSet");
1949:                throw new RuntimeException("All children of ConstraintLayout must have ids to use ConstraintSet");
1996:                throw new RuntimeException("All children of ConstraintLayout must have ids to use ConstraintSet");
2033:                    throw new RuntimeException("All children of ConstraintLayout must have ids to use ConstraintSet");
2069:                    throw new RuntimeException("All children of ConstraintLayout must have ids to use ConstraintSet");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/coordinatorlayout/widget/CoordinatorLayout.java
558:            throw new RuntimeException("Could not inflate Behavior subclass " + fullName, e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/coordinatorlayout/widget/DirectedAcyclicGraph.java
94:            throw new RuntimeException("This graph contains cyclic dependencies");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/app/AppComponentFactory.java
42:            throw new RuntimeException("Couldn't call constructor", e);
50:            throw new RuntimeException("Couldn't call constructor", e);
58:            throw new RuntimeException("Couldn't call constructor", e);
66:            throw new RuntimeException("Couldn't call constructor", e);
74:            throw new RuntimeException("Couldn't call constructor", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/ContextCompat.java
224:            throw new RuntimeException("Permission " + permission + " is required by your application to receive broadcasts, please add it to your manifest");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/content/pm/PackageInfoCompat.java
60:            throw new RuntimeException("Device doesn't support SHA256 cert checking", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/PathParser.java
39:                throw new RuntimeException("Error in parsing " + pathData, e);
150:            throw new RuntimeException("error in parsing \"" + s + "\"", e);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/graphics/TypefaceCompatApi29Impl.java
42:        throw new RuntimeException("Do not use this function in API 29 or later.");
48:        throw new RuntimeException("Do not use this function in API 29 or later.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/view/GestureDetectorCompat.java
85:                        throw new RuntimeException("Unknown message " + msg);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/core/widget/AutoScrollHelper.java
404:                throw new RuntimeException("Cannot compute scroll delta before calling start()");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/customview/widget/ExploreByTouchHelper.java
342:            throw new RuntimeException("Callbacks must add text or a content description in populateEventForVirtualViewId()");
364:            throw new RuntimeException("Views cannot have both real and virtual children");
390:            throw new RuntimeException("Callbacks must add text or a content description in populateNodeForVirtualViewId()");
394:            throw new RuntimeException("Callbacks must set parent bounds in populateNodeForVirtualViewId()");
398:            throw new RuntimeException("Callbacks must not add ACTION_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");
401:            throw new RuntimeException("Callbacks must not add ACTION_CLEAR_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/emoji2/text/EmojiCompatInitializer.java
108:                    throw new RuntimeException("EmojiCompat font provider not available on this device.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/emoji2/text/FontRequestEmojiCompatConfig.java
149:                    throw new RuntimeException("fetchFonts failed (" + result.getStatusCode() + ")");
153:                    throw new RuntimeException("fetchFonts failed (empty result)");
157:                throw new RuntimeException("provider not found", e);
234:                        throw new RuntimeException("fetchFonts result is not OK. (" + resultCode + ")");
241:                            throw new RuntimeException("Unable to open file.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/fragment/app/ListFragment.java
215:                    throw new RuntimeException("Your content must have a ListView whose id attribute is 'android.R.id.list'");
217:                throw new RuntimeException("Content has view with id attribute 'android.R.id.list' that is not a ListView class");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/lifecycle/ClassesInfoCache.java
192:                throw new RuntimeException("Failed to call observer method", e2.getCause());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/lifecycle/SavedStateViewModelFactoryKt.java
28:            throw new RuntimeException("Failed to access " + modelClass, e);
30:            throw new RuntimeException("A " + modelClass + " cannot be instantiated.", e2);
32:            throw new RuntimeException("An exception happened in constructor of " + modelClass, e3.getCause());

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/lifecycle/ViewModelProvider.java
165:                throw new RuntimeException("Cannot create an instance of " + modelClass, e);
167:                throw new RuntimeException("Cannot create an instance of " + modelClass, e2);
169:                throw new RuntimeException("Cannot create an instance of " + modelClass, e3);
274:                    throw new RuntimeException("Cannot create an instance of " + modelClass, e);
276:                    throw new RuntimeException("Cannot create an instance of " + modelClass, e2);
278:                    throw new RuntimeException("Cannot create an instance of " + modelClass, e3);
280:                    throw new RuntimeException("Cannot create an instance of " + modelClass, e4);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/loader/content/ModernAsyncTask.java
112:                    throw new RuntimeException("An error occurred while executing doInBackground()", e3.getCause());
114:                    throw new RuntimeException("An error occurred while executing doInBackground()", t);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/ChildHelper.java
224:            throw new RuntimeException("trying to unhide a view that was not hidden" + view);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/recyclerview/widget/LinearLayoutManager.java
1304:                    throw new RuntimeException("detected invalid position. loc invalid? " + (screenLoc < lastScreenLoc));
1308:                    throw new RuntimeException("detected invalid location");
1319:                throw new RuntimeException("detected invalid position. loc invalid? " + (screenLoc2 < lastScreenLoc));
1323:                throw new RuntimeException("detected invalid location");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/savedstate/Recreator.java
66:                    throw new RuntimeException("Failed to instantiate " + className, e);
72:            throw new RuntimeException("Class " + className + " wasn't found", e3);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/transition/PatternPathMotion.java
34:                throw new RuntimeException("pathData must be supplied for patternPathMotion");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/transition/TransitionInflater.java
137:                                                throw new RuntimeException("Could not create " + className, e);
154:                        throw new RuntimeException("Unknown scene name: " + parser.getName());
233:                throw new RuntimeException("No toScene for transition ID " + transitionId);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/versionedparcelable/VersionedParcel.java
739:            throw new RuntimeException("VersionedParcelable encountered IOException writing serializable object (name = " + name + ")", ioe);
824:                return new RuntimeException("Unknown exception code: " + code + " msg " + msg);
1064:            throw new RuntimeException("VersionedParcelable encountered IOException reading a Serializable object (name = " + name + ")", ioe);
1066:            throw new RuntimeException("VersionedParcelable encountered ClassNotFoundException reading a Serializable object (name = " + name + ")", cnfe);
1075:            throw new RuntimeException("VersionedParcel encountered ClassNotFoundException", e);
1077:            throw new RuntimeException("VersionedParcel encountered IllegalAccessException", e2);
1079:            throw new RuntimeException("VersionedParcel encountered NoSuchMethodException", e3);
1084:            throw new RuntimeException("VersionedParcel encountered InvocationTargetException", e4);
1093:            throw new RuntimeException("VersionedParcel encountered ClassNotFoundException", e);
1095:            throw new RuntimeException("VersionedParcel encountered IllegalAccessException", e2);
1097:            throw new RuntimeException("VersionedParcel encountered NoSuchMethodException", e3);
1102:            throw new RuntimeException("VersionedParcel encountered InvocationTargetException", e4);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/androidx/versionedparcelable/VersionedParcelStream.java
108:            throw new RuntimeException("Serialization of this object is not allowed");
202:            throw new RuntimeException("CharSequence cannot be written to an OutputStream");
269:            throw new RuntimeException("Binders cannot be written to an OutputStream");
276:            throw new RuntimeException("Parcelables cannot be written to an OutputStream");
283:            throw new RuntimeException("Binders cannot be written to an OutputStream");
529:                throw new RuntimeException("Unknown type " + type);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/internal/NavigationMenuPresenter.java
512:            throw new RuntimeException("Unknown item type.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/com/google/android/material/textfield/DropdownMenuEndIconDelegate.java
306:            throw new RuntimeException("EditText needs to be an AutoCompleteTextView if an Exposed Dropdown Menu is being used.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlin/system/ProcessKt.java
13:        throw new RuntimeException("System.exit returned normally, while it was supposed to halt JVM.");

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlinx/coroutines/CoroutineExceptionHandlerImplKt.java
25:                currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, CoroutineExceptionHandlerKt.handlerException(exception, t));
37:        currentThread2.getUncaughtExceptionHandler().uncaughtException(currentThread2, exception);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlinx/coroutines/CoroutineExceptionHandlerKt.java
30:        Throwable $this$handlerException_u24lambda_u2d1 = new RuntimeException("Exception while trying to handle coroutine exception", thrownException);

/home/kali/Desktop/test/MASTG-TEST0039_SAST/sources/kotlinx/coroutines/scheduling/CoroutineScheduler.java
559:                thread.getUncaughtExceptionHandler().uncaughtException(thread, e);

[!] QuickNote:
    - It is recommended that a well-designed and unified scheme to handle exceptions, if observed. Please note that, The application should not expose any sensitive data while handling exceptions in its UI or log-statements.

[*] Reference:
    - OWASP MASVS V7: MSTG-CODE-6 | CWE-755: Improper Handling of Exceptional Conditions
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements

==>> The Obfuscated Code blocks...

[!] QuickNote:
    - It is recommended that some basic obfuscation should be implemented to the release byte-code, if not observed. Please note that, Code obfuscation in the applications protects against reverse engineering, tampering, or other attacks.

[*] Reference:
    - OWASP MASVS V7: MSTG-CODE-9 | CWE-693: Protection Mechanism Failure
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements


[+] Hunting begins based on "V8: Resilience Requirements"
[+] -----------------------------------------------------

==>> The Root Detection implementation...

[!] QuickNote:
    - It is recommended to implement root detection mechanisms in the application, if not observed. Please note that, Multiple detection methods should be implemented so that it cannot be bypassed easily.

[*] Reference:
    - OWASP MASVS V8: MSTG-RESILIENCE-1 | CWE-250: Execution with Unnecessary Privileges
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements

==>> The Anti-Debugging Detection implementation...

[!] QuickNote:
    - It is recommended to implement Anti-Debugging detection mechanisms in the application, if not observed. Please note that, Multiple detection methods should be implemented so that it cannot be bypassed easily.

[*] Reference:
    - OWASP MASVS V8: MSTG-RESILIENCE-2 | CWE-693: Protection Mechanism Failure
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements

==>> The File Integrity Checks implementation...

[!] QuickNote:
    - It is recommended to implement CRC checks on the app bytecode, native libraries, and important data files, if not observed. Please note that, reverse engineers can easily bypass APK code signature check by re-packaging and re-signing an app. The idea is to have additional controls in place so that the app only runs correctly in its unmodified state, even if the code signature is valid.

[*] Reference:
    - OWASP MASVS V8: MSTG-RESILIENCE-3 | CWE-693: Protection Mechanism Failure
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements

==>> The Emulator Detection implementation...

[!] QuickNote:
    - It is recommended to implement Emulator detection mechanisms in the application, if not observed. Please note that, Multiple detection methods should be implemented so that it cannot be bypassed easily.

[*] Reference:
    - OWASP MASVS V8: MSTG-RESILIENCE-5 | CWE-693: Protection Mechanism Failure
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements

==>> The implementation of any Defence Mechanisms...

[!] QuickNote:
    - It is recommended to implement various defence mechanisms such as SafetyNet Attestation API, if not observed.

[*] Reference:
    - OWASP MASVS V8: MSTG-RESILIENCE-7 | CWE-693: Protection Mechanism Failure
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements

[+] Scan has been finished at: 2024-05-27 13:14:37.937523146 -0400 EDT m=+455.470244700

[+] Total time taken for hunting: 7m35.469811078s

[*] Thank you for using APKHunt! Made with <3 in India.

